//  /////////////////////////////////////////////////////
//  // DO NOT EDIT.  This is a machine generated file. //
//  /////////////////////////////////////////////////////

/******************************************************************************/
/*                                                                            */
/*  Copyright (C) 2018, FLIR Systems                                          */
/*  All rights reserved.                                                      */
/*                                                                            */
/*  This document is controlled to FLIR Technology Level 2. The information   */
/*  contained in this document pertains to a dual use product controlled for  */
/*  export by the Export Administration Regulations (EAR). Diversion contrary */
/*  to US law is prohibited. US Department of Commerce authorization is not   */
/*  required prior to export or transfer to foreign persons or parties unless */
/*  otherwise prohibited.                                                     */
/*                                                                            */
/******************************************************************************/


#ifndef ENUM_TYPES_H
#define ENUM_TYPES_H

#include <stdint.h>


enum e_FLR_ENABLE_E {
    FLR_DISABLE = (int32_t) 0,
    FLR_ENABLE = (int32_t) 1,
    FLR_ENABLE_END = (int32_t) 2,
};
typedef enum e_FLR_ENABLE_E FLR_ENABLE_E;

enum e_FLR_TEMPERATURE_UNIT_E {
    FLR_TEMPERATURE_UNIT_KELVIN = (int32_t) 0,
    FLR_TEMPERATURE_UNIT_CELSIUS = (int32_t) 1,
    FLR_TEMPERATURE_UNIT_FAHRENHEIT = (int32_t) 2,
    FLR_TEMPERATURE_UNIT_LAST = (int32_t) 3,
};
typedef enum e_FLR_TEMPERATURE_UNIT_E FLR_TEMPERATURE_UNIT_E;

enum e_FLR_AGC_MODE_E {
    FLR_AGC_MODE_NORMAL = (int32_t) 0,
    FLR_AGC_MODE_HOLD = (int32_t) 1,
    FLR_AGC_MODE_THRESHOLD = (int32_t) 2,
    FLR_AGC_MODE_AUTO_BRIGHT = (int32_t) 3,
    FLR_AGC_MODE_AUTO_LINEAR = (int32_t) 4,
    FLR_AGC_MODE_MANUAL = (int32_t) 5,
    FLR_AGC_MODE_END = (int32_t) 6,
};
typedef enum e_FLR_AGC_MODE_E FLR_AGC_MODE_E;

enum e_FLR_BOSON_GAINMODE_E {
    FLR_BOSON_HIGH_GAIN = (int32_t) 0,
    FLR_BOSON_LOW_GAIN = (int32_t) 1,
    FLR_BOSON_AUTO_GAIN = (int32_t) 2,
    FLR_BOSON_DUAL_GAIN = (int32_t) 3,
    FLR_BOSON_MANUAL_GAIN = (int32_t) 4,
    FLR_BOSON_GAINMODE_END = (int32_t) 5,
};
typedef enum e_FLR_BOSON_GAINMODE_E FLR_BOSON_GAINMODE_E;

enum e_FLR_BOSON_FFCMODE_E {
    FLR_BOSON_MANUAL_FFC = (int32_t) 0,
    FLR_BOSON_AUTO_FFC = (int32_t) 1,
    FLR_BOSON_EXTERNAL_FFC = (int32_t) 2,
    FLR_BOSON_SHUTTER_TEST_FFC = (int32_t) 3,
    FLR_BOSON_FFCMODE_END = (int32_t) 4,
};
typedef enum e_FLR_BOSON_FFCMODE_E FLR_BOSON_FFCMODE_E;

enum e_FLR_BOSON_TIMESTAMPTYPE_E {
    FLR_BOSON_UARTINIT = (int32_t) 0,
    FLR_BOSON_PIXELCLOCKINIT = (int32_t) 1,
    FLR_BOSON_AUTHEVENT = (int32_t) 2,
    FLR_BOSON_FIRSTVALIDIMAGE = (int32_t) 3,
    FLR_BOSON_TIMESTAMPTYPE_END = (int32_t) 4,
};
typedef enum e_FLR_BOSON_TIMESTAMPTYPE_E FLR_BOSON_TIMESTAMPTYPE_E;

enum e_FLR_BOSON_AUTOGAIN_SWITCH_CONDITION_E {
    FLR_BOSON_AUTOGAIN_SWITCH_CONDITION_RELATIVE_HOT = (int32_t) 0,
    FLR_BOSON_AUTOGAIN_SWITCH_CONDITION_RELATIVE_COLD = (int32_t) 1,
    FLR_BOSON_AUTOGAIN_SWITCH_CONDITION_RELATIVE_HOT_OR_COLD = (int32_t) 2,
    FLR_BOSON_AUTOGAIN_SWITCH_CONDITION_END = (int32_t) 3,
};
typedef enum e_FLR_BOSON_AUTOGAIN_SWITCH_CONDITION_E FLR_BOSON_AUTOGAIN_SWITCH_CONDITION_E;

enum e_FLR_BOSON_FFCSTATUS_E {
    FLR_BOSON_NO_FFC_PERFORMED = (int32_t) 0,
    FLR_BOSON_FFC_IMMINENT = (int32_t) 1,
    FLR_BOSON_FFC_IN_PROGRESS = (int32_t) 2,
    FLR_BOSON_FFC_COMPLETE = (int32_t) 3,
    FLR_BOSON_FFCSTATUS_END = (int32_t) 4,
};
typedef enum e_FLR_BOSON_FFCSTATUS_E FLR_BOSON_FFCSTATUS_E;

enum e_FLR_BOSON_MYRIADTEMPMODE_E {
    FLR_BOSON_NORMAL_MYRIADTEMP_MODE = (int32_t) 0,
    FLR_BOSON_STATIC_MYRIADTEMP_MODE = (int32_t) 1,
};
typedef enum e_FLR_BOSON_MYRIADTEMPMODE_E FLR_BOSON_MYRIADTEMPMODE_E;

enum e_FLR_BOSON_EXT_SYNC_MODE_E {
    FLR_BOSON_EXT_SYNC_DISABLE_MODE = (int32_t) 0,
    FLR_BOSON_EXT_SYNC_MASTER_MODE = (int32_t) 1,
    FLR_BOSON_EXT_SYNC_SLAVE_MODE = (int32_t) 2,
    FLR_BOSON_EXT_SYNC_END = (int32_t) 3,
};
typedef enum e_FLR_BOSON_EXT_SYNC_MODE_E FLR_BOSON_EXT_SYNC_MODE_E;

enum e_FLR_BOSON_TEMP_DIODE_STATUS_E {
    FLR_BOSON_TEMP_DIODE_NORMAL = (int32_t) 0,
    FLR_BOSON_TEMP_DIODE_FAULT = (int32_t) 1,
    FLR_BOSON_TEMP_DIODE_END = (int32_t) 2,
};
typedef enum e_FLR_BOSON_TEMP_DIODE_STATUS_E FLR_BOSON_TEMP_DIODE_STATUS_E;

enum e_FLR_BOSON_TABLETYPE_E {
    FLR_BOSON_LOWGAIN_TABLE = (int32_t) 0,
    FLR_BOSON_HIGHGAIN_TABLE = (int32_t) 1,
    FLR_BOSON_TABLETYPE_END = (int32_t) 2,
};
typedef enum e_FLR_BOSON_TABLETYPE_E FLR_BOSON_TABLETYPE_E;

enum e_FLR_BPR_DISPLAY_MODE_E {
    FLR_BPR_NORMAL_DISPLAY_MODE = (int32_t) 0,
    FLR_BPR_MIN_VALUE_ONLY_MODE = (int32_t) 1,
    FLR_BPR_MAX_VALUE_ONLY_MODE = (int32_t) 2,
    FLR_BPR_MIN_MAX_TOGGLE_MODE = (int32_t) 3,
    FLR_BPR_BPR_DISPLAY_MODE_END = (int32_t) 4,
};
typedef enum e_FLR_BPR_DISPLAY_MODE_E FLR_BPR_DISPLAY_MODE_E;

enum e_FLR_CAPTURE_SRC_E {
    FLR_CAPTURE_SRC_NUC = (int32_t) 1,
    FLR_CAPTURE_SRC_RESERVED = (int32_t) 2,
    FLR_CAPTURE_SRC_TNF = (int32_t) 3,
    FLR_CAPTURE_SRC_BLEND = (int32_t) 4,
    FLR_CAPTURE_SRC_VIS = (int32_t) 5,
    FLR_CAPTURE_SRC_MSX = (int32_t) 6,
    FLR_CAPTURE_SRC_RAW = (int32_t) 7,
    FLR_CAPTURE_SRC_TLINEAR = (int32_t) 8,
    FLR_CAPTURE_SRC_END = (int32_t) 9,
};
typedef enum e_FLR_CAPTURE_SRC_E FLR_CAPTURE_SRC_E;

enum e_FLR_CAPTURE_FILE_TYPE_E {
    FLR_CAPTURE_NONE = (int32_t) 0,
    FLR_CAPTURE_JPEG = (int32_t) 1,
    FLR_CAPTURE_PNG = (int32_t) 2,
};
typedef enum e_FLR_CAPTURE_FILE_TYPE_E FLR_CAPTURE_FILE_TYPE_E;

enum e_FLR_CAPTURE_STATE_E {
    FLR_CAPTURE_READY = (int32_t) 0,
    FLR_CAPTURE_IN_PROGRESS = (int32_t) 1,
};
typedef enum e_FLR_CAPTURE_STATE_E FLR_CAPTURE_STATE_E;

enum e_FLR_COLORLUT_ID_E {
    FLR_COLORLUT_0 = (int32_t) 0,
    FLR_COLORLUT_DEFAULT = (int32_t) 0,
    FLR_COLORLUT_WHITEHOT = (int32_t) 0,
    FLR_COLORLUT_1 = (int32_t) 1,
    FLR_COLORLUT_BLACKHOT = (int32_t) 1,
    FLR_COLORLUT_2 = (int32_t) 2,
    FLR_COLORLUT_RAINBOW = (int32_t) 2,
    FLR_COLORLUT_3 = (int32_t) 3,
    FLR_COLORLUT_RAINBOW_HC = (int32_t) 3,
    FLR_COLORLUT_4 = (int32_t) 4,
    FLR_COLORLUT_IRONBOW = (int32_t) 4,
    FLR_COLORLUT_5 = (int32_t) 5,
    FLR_COLORLUT_LAVA = (int32_t) 5,
    FLR_COLORLUT_6 = (int32_t) 6,
    FLR_COLORLUT_ARCTIC = (int32_t) 6,
    FLR_COLORLUT_7 = (int32_t) 7,
    FLR_COLORLUT_GLOBOW = (int32_t) 7,
    FLR_COLORLUT_8 = (int32_t) 8,
    FLR_COLORLUT_GRADEDFIRE = (int32_t) 8,
    FLR_COLORLUT_9 = (int32_t) 9,
    FLR_COLORLUT_HOTTEST = (int32_t) 9,
    FLR_COLORLUT_10 = (int32_t) 10,
    FLR_COLORLUT_EMBERGLOW = (int32_t) 10,
    FLR_COLORLUT_11 = (int32_t) 11,
    FLR_COLORLUT_AURORA = (int32_t) 11,
    FLR_COLORLUT_ID_END = (int32_t) 12,
};
typedef enum e_FLR_COLORLUT_ID_E FLR_COLORLUT_ID_E;

enum e_FLR_DVO_OUTPUT_FORMAT_E {
    FLR_DVO_RGB = (int32_t) 0,
    FLR_DVO_YCBCR = (int32_t) 1,
    FLR_DVO_DEFAULT_FORMAT = (int32_t) 2,
    FLR_DVO_IR16 = (int32_t) 3,
    FLR_DVO_OUTPUT_FORMAT_END = (int32_t) 4,
};
typedef enum e_FLR_DVO_OUTPUT_FORMAT_E FLR_DVO_OUTPUT_FORMAT_E;

enum e_FLR_DVO_OUTPUT_RGB_FORMAT_E {
    FLR_DVO_RGB888 = (int32_t) 0,
    FLR_DVO_MRGB888 = (int32_t) 1,
    FLR_DVO_RGB565 = (int32_t) 2,
    FLR_DVO_MRGB565 = (int32_t) 3,
    FLR_DVO_OUTPUT_RGB_FORMAT_END = (int32_t) 4,
};
typedef enum e_FLR_DVO_OUTPUT_RGB_FORMAT_E FLR_DVO_OUTPUT_RGB_FORMAT_E;

enum e_FLR_DVO_OUTPUT_YCBCR_FORMAT_E {
    FLR_DVO_YCBCR422_8B = (int32_t) 0,
    FLR_DVO_MYCBCR422_8B = (int32_t) 1,
    FLR_DVO_OUTPUT_YCBCR_FORMAT_END = (int32_t) 2,
};
typedef enum e_FLR_DVO_OUTPUT_YCBCR_FORMAT_E FLR_DVO_OUTPUT_YCBCR_FORMAT_E;

enum e_FLR_DVO_OUTPUT_IR16_FORMAT_E {
    FLR_DVO_IR16_16B = (int32_t) 0,
    FLR_DVO_MIR16_8B = (int32_t) 1,
    FLR_DVO_OUTPUT_IR16_FORMAT_END = (int32_t) 2,
};
typedef enum e_FLR_DVO_OUTPUT_IR16_FORMAT_E FLR_DVO_OUTPUT_IR16_FORMAT_E;

enum e_FLR_DVO_OUTPUT_CBCR_ORDER_E {
    FLR_DVO_CRCB = (int32_t) 0,
    FLR_DVO_CBCR = (int32_t) 1,
    FLR_DVO_OUTPUT_CBCR_ORDER_END = (int32_t) 2,
};
typedef enum e_FLR_DVO_OUTPUT_CBCR_ORDER_E FLR_DVO_OUTPUT_CBCR_ORDER_E;

enum e_FLR_DVO_OUTPUT_Y_ORDER_E {
    FLR_DVO_YFIRST = (int32_t) 0,
    FLR_DVO_YLAST = (int32_t) 1,
    FLR_DVO_OUTPUT_Y_ORDER_END = (int32_t) 2,
};
typedef enum e_FLR_DVO_OUTPUT_Y_ORDER_E FLR_DVO_OUTPUT_Y_ORDER_E;

enum e_FLR_DVO_OUTPUT_RGB_ORDER_E {
    FLR_DVO_ORDER_RGB = (int32_t) 0,
    FLR_DVO_ORDER_BGR = (int32_t) 1,
    FLR_DVO_OUTPUT_RGB_ORDER_END = (int32_t) 2,
};
typedef enum e_FLR_DVO_OUTPUT_RGB_ORDER_E FLR_DVO_OUTPUT_RGB_ORDER_E;

enum e_FLR_DVO_TYPE_E {
    FLR_DVO_TYPE_MONO16 = (int32_t) 0,
    FLR_DVO_TYPE_MONO8 = (int32_t) 1,
    FLR_DVO_TYPE_COLOR = (int32_t) 2,
    FLR_DVO_TYPE_ANALOG = (int32_t) 3,
    FLR_DVO_TYPE_RAW = (int32_t) 4,
    FLR_DVO_TYPE_MONO14 = (int32_t) 5,
    FLR_DVO_TYPE_TLINEAR = (int32_t) 6,
    FLR_DVO_TYPE_MONO12 = (int32_t) 7,
    FLR_DVO_TYPE_MONO8MONO14 = (int32_t) 8,
    FLR_DVO_TYPE_MONO8MONO12 = (int32_t) 9,
    FLR_DVO_TYPE_COLORMONO14 = (int32_t) 10,
    FLR_DVO_TYPE_COLORMONO12 = (int32_t) 11,
    FLR_DVO_TYPE_COLORMONO8 = (int32_t) 12,
    FLR_DVO_TYPE_COLORTLINEAR = (int32_t) 13,
    FLR_DVO_TYPE_MONO8TLINEAR = (int32_t) 14,
    FLR_DVO_TYPE_END = (int32_t) 15,
};
typedef enum e_FLR_DVO_TYPE_E FLR_DVO_TYPE_E;

enum e_FLR_DVO_OUTPUT_INTERFACE_E {
    FLR_DVO_CMOS = (int32_t) 0,
    FLR_DVO_MIPI = (int32_t) 1,
    FLR_DVO_OUTPUT_INTERFACE_END = (int32_t) 2,
};
typedef enum e_FLR_DVO_OUTPUT_INTERFACE_E FLR_DVO_OUTPUT_INTERFACE_E;

enum e_FLR_DVO_DISPLAY_MODE_E {
    FLR_DVO_CONTINUOUS = (int32_t) 0,
    FLR_DVO_ONE_SHOT = (int32_t) 1,
    FLR_DVO_DISPLAY_MODE_END = (int32_t) 2,
};
typedef enum e_FLR_DVO_DISPLAY_MODE_E FLR_DVO_DISPLAY_MODE_E;

enum e_FLR_DVO_VIDEO_STANDARD_E {
    FLR_DVO_NTSC = (int32_t) 0,
    FLR_DVO_PAL = (int32_t) 1,
    FLR_DVO_VIDEO_STANDARD_END = (int32_t) 2,
};
typedef enum e_FLR_DVO_VIDEO_STANDARD_E FLR_DVO_VIDEO_STANDARD_E;

enum e_FLR_DVO_LCD_CONFIG_ID_E {
    FLR_DVO_DEFAULT = (int32_t) 0,
    FLR_DVO_CUSTOM1 = (int32_t) 1,
    FLR_DVO_CUSTOM2 = (int32_t) 2,
    FLR_DVO_CONFIG1 = (int32_t) 3,
    FLR_DVO_CONFIG2 = (int32_t) 4,
};
typedef enum e_FLR_DVO_LCD_CONFIG_ID_E FLR_DVO_LCD_CONFIG_ID_E;

enum e_FLR_DVO_LCD_CLOCK_RATE_E {
    FLR_DVO_LCD_CLOCK_DEFAULT = (int32_t) 0,
    FLR_DVO_LCD_CLOCK_27MHZ = (int32_t) 1,
    FLR_DVO_LCD_CLOCK_13_5MHZ = (int32_t) 2,
    FLR_DVO_LCD_CLOCK_48MHZ = (int32_t) 3,
    FLR_DVO_LCD_CLOCK_60MHZ = (int32_t) 4,
    FLR_DVO_LCD_CLOCK_END = (int32_t) 5,
};
typedef enum e_FLR_DVO_LCD_CLOCK_RATE_E FLR_DVO_LCD_CLOCK_RATE_E;

enum e_FLR_DVO_MIPI_STATE_E {
    FLR_DVO_MIPI_STATE_OFF = (int32_t) 0,
    FLR_DVO_MIPI_STATE_PAUSED = (int32_t) 1,
    FLR_DVO_MIPI_STATE_ACTIVE = (int32_t) 2,
    FLR_DVO_MIPI_STATE_END = (int32_t) 3,
};
typedef enum e_FLR_DVO_MIPI_STATE_E FLR_DVO_MIPI_STATE_E;

enum e_FLR_DVO_MIPI_CLOCK_LANE_MODE_E {
    FLR_DVO_MIPI_CLOCK_LANE_MODE_NON_CONTINUOUS = (int32_t) 0,
    FLR_DVO_MIPI_CLOCK_LANE_MODE_CONTINUOUS = (int32_t) 1,
    FLR_DVO_MIPI_CLOCK_LANE_MODE_END = (int32_t) 2,
};
typedef enum e_FLR_DVO_MIPI_CLOCK_LANE_MODE_E FLR_DVO_MIPI_CLOCK_LANE_MODE_E;

enum e_FLR_DVOMUX_TYPE_E {
    FLR_DVOMUX_TYPE_MONO16 = (int32_t) 0,
    FLR_DVOMUX_TYPE_MONO8 = (int32_t) 1,
    FLR_DVOMUX_TYPE_COLOR = (int32_t) 2,
    FLR_DVOMUX_TYPE_ANALOG = (int32_t) 3,
    FLR_DVOMUX_TYPE_MONO14 = (int32_t) 4,
    FLR_DVOMUX_TYPE_END = (int32_t) 5,
};
typedef enum e_FLR_DVOMUX_TYPE_E FLR_DVOMUX_TYPE_E;

enum e_FLR_DVOMUX_SOURCE_E {
    FLR_DVOMUX_SRC_IR = (int32_t) 0,
    FLR_DVOMUX_SRC_VIS = (int32_t) 1,
    FLR_DVOMUX_SRC_H264DEC = (int32_t) 2,
    FLR_DVOMUX_SRC_END = (int32_t) 3,
};
typedef enum e_FLR_DVOMUX_SOURCE_E FLR_DVOMUX_SOURCE_E;

enum e_FLR_DVOMUX_OUTPUT_IF_E {
    FLR_DVOMUX_OUTPUT_IF_DVO = (int32_t) 0,
    FLR_DVOMUX_OUTPUT_IF_UVC = (int32_t) 1,
    FLR_DVOMUX_OUTPUT_IF_CAPTURE = (int32_t) 2,
    FLR_DVOMUX_OUTPUT_IF_MIPITX = (int32_t) 3,
    FLR_DVOMUX_OUTPUT_IF_H264ENC = (int32_t) 4,
    FLR_DVOMUX_OUTPUT_IF_END = (int32_t) 5,
};
typedef enum e_FLR_DVOMUX_OUTPUT_IF_E FLR_DVOMUX_OUTPUT_IF_E;

enum e_FLR_GAO_NUC_TYPE_E {
    FLR_GAO_NUC_TYPE_ONE_POINT_FFC = (int32_t) 0,
    FLR_GAO_NUC_TYPE_TWO_POINT_FIELD = (int32_t) 1,
    FLR_GAO_NUC_TYPE_TWO_POINT_FACTORY = (int32_t) 2,
    FLR_GAO_NUC_TYPE_END = (int32_t) 3,
};
typedef enum e_FLR_GAO_NUC_TYPE_E FLR_GAO_NUC_TYPE_E;

enum e_FLR_GAO_SFFC_MODE_E {
    FLR_GAO_SFFC_MODE_TRADITIONAL = (int32_t) 0,
    FLR_GAO_SFFC_MODE_BOSS = (int32_t) 1,
    FLR_GAO_SFFC_MODE_END = (int32_t) 3,
};
typedef enum e_FLR_GAO_SFFC_MODE_E FLR_GAO_SFFC_MODE_E;

enum e_FLR_ISOTHERM_REGION_E {
    FLR_ISOTHERM_REGION_DISABLED = (int32_t) 0,
    FLR_ISOTHERM_REGION_CORRELATED = (int32_t) 1,
    FLR_ISOTHERM_REGION_NON_CORRELATED = (int32_t) 2,
    FLR_ISOTHERM_REGION_COLORIZE = (int32_t) 3,
    FLR_ISOTHERM_REGION_BLEND = (int32_t) 4,
    FLR_ISOTHERM_REGION_CORRELATED_HSV = (int32_t) 5,
    FLR_ISOTHERM_REGION_NON_CORRELATED_HSV = (int32_t) 6,
    FLR_ISOTHERM_REGION_COMMON = (int32_t) 7,
    FLR_ISOTHERM_REGION_LAST = (int32_t) 8,
};
typedef enum e_FLR_ISOTHERM_REGION_E FLR_ISOTHERM_REGION_E;

enum e_FLR_ISOTHERM_GAIN_E {
    FLR_ISOTHERM_GAIN_LOW = (int32_t) 0,
    FLR_ISOTHERM_GAIN_HIGH = (int32_t) 1,
    FLR_ISOTHERM_GAIN_LAST = (int32_t) 2,
};
typedef enum e_FLR_ISOTHERM_GAIN_E FLR_ISOTHERM_GAIN_E;

enum e_FLR_ISOTHERM_UNIT_E {
    FLR_ISOTHERM_UNIT_KELVIN = (int32_t) 0,
    FLR_ISOTHERM_UNIT_CELSIUS = (int32_t) 1,
    FLR_ISOTHERM_UNIT_FAHRENHEIT = (int32_t) 4,
    FLR_ISOTHERM_UNIT_PERCENT = (int32_t) 5,
    FLR_ISOTHERM_UNIT_RAW = (int32_t) 6,
    FLR_ISOTHERM_UNIT_LAST = (int32_t) 7,
};
typedef enum e_FLR_ISOTHERM_UNIT_E FLR_ISOTHERM_UNIT_E;

enum e_FLR_JFFS2_STATE_E {
    FLR_JFFS2_INITIAL = (int32_t) 0,
    FLR_JFFS2_CONFIGURED = (int32_t) 1,
    FLR_JFFS2_MOUNTING = (int32_t) 2,
    FLR_JFFS2_MOUNTED = (int32_t) 3,
    FLR_JFFS2_UNMOUNTING = (int32_t) 4,
    FLR_JFFS2_UNMOUNTED = (int32_t) 5,
    FLR_JFFS2_FAILED_MOUNT = (int32_t) 6,
    FLR_JFFS2_FAILED_UNMOUNT = (int32_t) 7,
    FLR_JFFS2_FAILED_CONFIG = (int32_t) 8,
    FLR_JFFS2_DISABLED = (int32_t) 9,
    FLR_JFFS2_STATE_END = (int32_t) 10,
};
typedef enum e_FLR_JFFS2_STATE_E FLR_JFFS2_STATE_E;

enum e_FLR_MEM_LOCATION_E {
    FLR_MEM_INVALID = (int32_t) 0,
    FLR_MEM_BOOTLOADER = (int32_t) 1,
    FLR_MEM_UPGRADE_APP = (int32_t) 2,
    FLR_MEM_LENS_NVFFC = (int32_t) 3,
    FLR_MEM_LENS_SFFC = (int32_t) 4,
    FLR_MEM_LENS_GAIN = (int32_t) 5,
    FLR_MEM_LENS_DISTORTION = (int32_t) 6,
    FLR_MEM_USER_SPACE = (int32_t) 7,
    FLR_MEM_RUN_CMDS = (int32_t) 8,
    FLR_MEM_JFFS2 = (int32_t) 9,
    FLR_MEM_MEMTEST_APP = (int32_t) 10,
    FLR_MEM_LAST = (int32_t) 11,
};
typedef enum e_FLR_MEM_LOCATION_E FLR_MEM_LOCATION_E;

enum e_FLR_RADIOMETRY_RBFO_TYPE_E {
    FLR_RADIOMETRY_DEFAULT_RBFO = (int32_t) 0,
    FLR_RADIOMETRY_FACTORY_RBFO = (int32_t) 1,
};
typedef enum e_FLR_RADIOMETRY_RBFO_TYPE_E FLR_RADIOMETRY_RBFO_TYPE_E;

enum e_FLR_RADIOMETRY_UNCERTAINTY_FACTOR_E {
    FLR_RADIOMETRY_UNCERTAINTY_FACTOR_1 = (int32_t) 1,
    FLR_RADIOMETRY_UNCERTAINTY_FACTOR_2 = (int32_t) 2,
    FLR_RADIOMETRY_UNCERTAINTY_FACTOR_3 = (int32_t) 3,
    FLR_RADIOMETRY_UNCERTAINTY_FACTOR_4 = (int32_t) 4,
    FLR_RADIOMETRY_UNCERTAINTY_FACTOR_5 = (int32_t) 5,
};
typedef enum e_FLR_RADIOMETRY_UNCERTAINTY_FACTOR_E FLR_RADIOMETRY_UNCERTAINTY_FACTOR_E;

enum e_FLR_ROIC_TEMP_MODE_E {
    FLR_ROIC_TEMP_NORMAL_MODE = (int32_t) 0,
    FLR_ROIC_TEMP_OFFSET_MODE = (int32_t) 1,
    FLR_ROIC_TEMP_STATIC_MODE = (int32_t) 2,
    FLR_ROIC_TEMP_MODE_END = (int32_t) 3,
};
typedef enum e_FLR_ROIC_TEMP_MODE_E FLR_ROIC_TEMP_MODE_E;

enum e_FLR_ROIC_EXT_SYNC_MODE_E {
    FLR_ROIC_EXT_SYNC_DISABLE_MODE = (int32_t) 0,
    FLR_ROIC_EXT_SYNC_MASTER_MODE = (int32_t) 1,
    FLR_ROIC_EXT_SYNC_SLAVE_MODE = (int32_t) 2,
    FLR_ROIC_EXT_SYNC_END = (int32_t) 3,
};
typedef enum e_FLR_ROIC_EXT_SYNC_MODE_E FLR_ROIC_EXT_SYNC_MODE_E;

enum e_FLR_SCNR_CORR_SELECT_E {
    FLR_SCNR_STD_CORR = (int32_t) 0,
    FLR_SCNR_ABS_DIFF_CORR = (int32_t) 1,
    FLR_SCNR_CORR_END = (int32_t) 2,
};
typedef enum e_FLR_SCNR_CORR_SELECT_E FLR_SCNR_CORR_SELECT_E;

enum e_FLR_SCNR_MODE_E {
    FLR_SCNR_MODE_M = (int32_t) 0,
    FLR_SCNR_MODE_I = (int32_t) 1,
    FLR_SCNR_MODE_DIFFS = (int32_t) 2,
    FLR_SCNR_MODE_OFFSETS = (int32_t) 3,
    FLR_SCNR_MODE_END = (int32_t) 4,
};
typedef enum e_FLR_SCNR_MODE_E FLR_SCNR_MODE_E;

enum e_FLR_SPNR_STATE_E {
    FLR_SPNR_READY = (int32_t) 0,
    FLR_SPNR_DESIRED = (int32_t) 1,
    FLR_SPNR_IN_PROGRESS = (int32_t) 2,
    FLR_SPNR_COMPLETE = (int32_t) 3,
};
typedef enum e_FLR_SPNR_STATE_E FLR_SPNR_STATE_E;

enum e_FLR_SPNR_ALGORITHM_E {
    FLR_SPNR_ALGO_DWT = (int32_t) 0,
    FLR_SPNR_ALGO_DEFAULT = (int32_t) 0,
    FLR_SPNR_ALGO_ITER = (int32_t) 1,
};
typedef enum e_FLR_SPNR_ALGORITHM_E FLR_SPNR_ALGORITHM_E;

enum e_FLR_SPNR_RESET_E {
    FLR_SPNR_HARD_RESET = (int32_t) 0,
    FLR_SPNR_SOFT_RESET = (int32_t) 1,
};
typedef enum e_FLR_SPNR_RESET_E FLR_SPNR_RESET_E;

enum e_FLR_SPOTMETER_STATS_TEMP_MODE_E {
    FLR_SPOTMETER_CELCIUS = (int32_t) 0,
    FLR_SPOTMETER_FAHRENHEIT = (int32_t) 1,
    FLR_SPOTMETER_KELVIN = (int32_t) 2,
    FLR_SPOTMETER_END = (int32_t) 3,
};
typedef enum e_FLR_SPOTMETER_STATS_TEMP_MODE_E FLR_SPOTMETER_STATS_TEMP_MODE_E;

enum e_FLR_SYMBOLOGY_TEXT_ALIGNMENT_E {
    FLR_SYMBOLOGY_LEFT_TOP = (int16_t) 17,
    FLR_SYMBOLOGY_CENTER_TOP = (int16_t) 18,
    FLR_SYMBOLOGY_RIGHT_TOP = (int16_t) 19,
    FLR_SYMBOLOGY_LEFT_MIDDLE = (int16_t) 33,
    FLR_SYMBOLOGY_CENTER_MIDDLE = (int16_t) 34,
    FLR_SYMBOLOGY_RIGHT_MIDDLE = (int16_t) 35,
    FLR_SYMBOLOGY_LEFT_BOTTOM = (int16_t) 49,
    FLR_SYMBOLOGY_CENTER_BOTTOM = (int16_t) 50,
    FLR_SYMBOLOGY_RIGHT_BOTTOM = (int16_t) 51,
    FLR_SYMBOLOGY_ALIGNMENT_LAST = (int16_t) 64,
};
typedef enum e_FLR_SYMBOLOGY_TEXT_ALIGNMENT_E FLR_SYMBOLOGY_TEXT_ALIGNMENT_E;

enum e_FLR_SYMBOLOGY_TRANSFORMATION_E {
    FLR_SYMBOLOGY_TRANSFORMATION_NONE = (int16_t) 0,
    FLR_SYMBOLOGY_TRANSFORMATION_FLIP_BOTH = (int16_t) 1,
    FLR_SYMBOLOGY_TRANSFORMATION_FLIP_HORIZONTAL = (int16_t) 2,
    FLR_SYMBOLOGY_TRANSFORMATION_FLIP_VERTICAL = (int16_t) 3,
};
typedef enum e_FLR_SYMBOLOGY_TRANSFORMATION_E FLR_SYMBOLOGY_TRANSFORMATION_E;

enum e_FLR_SYMBOLOGY_IMAGE_TYPE_E {
    FLR_SYMBOLOGY_RAW_IMAGE = (int16_t) 0,
    FLR_SYMBOLOGY_PNG_IMAGE = (int16_t) 1,
    FLR_SYMBOLOGY_JPEG_IMAGE = (int16_t) 2,
    FLR_SYMBOLOGY_BMP_IMAGE = (int16_t) 3,
};
typedef enum e_FLR_SYMBOLOGY_IMAGE_TYPE_E FLR_SYMBOLOGY_IMAGE_TYPE_E;

enum e_FLR_SYMBOLOGY_SCALING_MODE_E {
    FLR_SYMBOLOGY_SCALING_MODE_NONE = (int16_t) 0,
    FLR_SYMBOLOGY_SCALING_MODE_FIT = (int16_t) 1,
    FLR_SYMBOLOGY_SCALING_MODE_CROP = (int16_t) 2,
    FLR_SYMBOLOGY_SCALING_MODE_FILL = (int16_t) 3,
};
typedef enum e_FLR_SYMBOLOGY_SCALING_MODE_E FLR_SYMBOLOGY_SCALING_MODE_E;

enum e_FLR_SYMBOLOGY_TYPE_E {
    FLR_SYMBOLOGY_EMPTY = (int16_t) 0,
    FLR_SYMBOLOGY_BITMAP = (int16_t) 1,
    FLR_SYMBOLOGY_ARC = (int16_t) 2,
    FLR_SYMBOLOGY_TEXT = (int16_t) 3,
    FLR_SYMBOLOGY_FILLEDRECTANGLE = (int16_t) 4,
    FLR_SYMBOLOGY_RECTANGLE = (int16_t) 5,
    FLR_SYMBOLOGY_FILLEDELLIPSE = (int16_t) 6,
    FLR_SYMBOLOGY_LINE = (int16_t) 7,
    FLR_SYMBOLOGY_SPRITE = (int16_t) 8,
};
typedef enum e_FLR_SYMBOLOGY_TYPE_E FLR_SYMBOLOGY_TYPE_E;

enum e_FLR_SYSCTRL_USBIR16_MODE_E {
    FLR_SYSCTRL_USBIR16_MODE_16 = (int32_t) 0,
    FLR_SYSCTRL_USBIR16_MODE_14 = (int32_t) 1,
    FLR_SYSCTRL_USBIR16_MODE_TLINEAR = (int32_t) 2,
    FLR_SYSCTRL_USBIR16_MODE_LAST = (int32_t) 3,
};
typedef enum e_FLR_SYSCTRL_USBIR16_MODE_E FLR_SYSCTRL_USBIR16_MODE_E;

enum e_FLR_SYSCTRL_OPERATING_MODE_E {
    FLR_SYSCTRL_MODE_UNKNOWN = (int32_t) -1,
    FLR_SYSCTRL_MODE_STARTUP = (int32_t) 0,
    FLR_SYSCTRL_MODE_NORMAL_IMAGING = (int32_t) 1,
    FLR_SYSCTRL_MODE_UPDATE = (int32_t) 2,
    FLR_SYSCTRL_MODE_LOW_POWER_IMAGING = (int32_t) 3,
    FLR_SYSCTRL_MODE_LOW_POWER = (int32_t) 4,
    FLR_SYSCTRL_MODE_TESTRAMP = (int32_t) 5,
    FLR_SYSCTRL_MODE_LENS_GAIN_CAL = (int32_t) 6,
    FLR_SYSCTRL_MODE_SFFC_CAL = (int32_t) 7,
    FLR_SYSCTRL_MODE_END = (int32_t) 8,
};
typedef enum e_FLR_SYSCTRL_OPERATING_MODE_E FLR_SYSCTRL_OPERATING_MODE_E;

enum e_FLR_SYSINFO_SW_CONFIG_ID_E {
    FLR_SYSINFO_UNKNOWN = (int32_t) 0,
    FLR_SYSINFO_BOSON_1406 = (int32_t) 1,
    FLR_SYSINFO_BOSON_1407 = (int32_t) 2,
    FLR_SYSINFO_BOSON_1403 = (int32_t) 3,
    FLR_SYSINFO_BOSON_BLENDED = (int32_t) 4,
    FLR_SYSINFO_BOSON_OTS = (int32_t) 5,
    FLR_SYSINFO_BOSON_MARITIME = (int32_t) 6,
    FLR_SYSINFO_NV4 = (int32_t) 7,
    FLR_SYSINFO_BOSON_SWIR = (int32_t) 8,
    FLR_SYSINFO_SENSORTEST_1406 = (int32_t) 9,
    FLR_SYSINFO_SENSORTEST_1407 = (int32_t) 10,
    FLR_SYSINFO_NEUTRINOLC = (int32_t) 11,
    FLR_SYSINFO_GLUON_1406 = (int32_t) 12,
    FLR_SYSINFO_GLUON_1407 = (int32_t) 13,
    FLR_SYSINFO_GRAVITON_1407 = (int32_t) 14,
    FLR_SYSINFO_BOSON_1904 = (int32_t) 15,
    FLR_SYSINFO_BOSON_OUTLINE_1406 = (int32_t) 16,
    FLR_SYSINFO_GRAVITON_1406 = (int32_t) 17,
    FLR_SYSINFO_BOSON_OUTLINE_1407 = (int32_t) 18,
    FLR_SYSINFO_SENSORTEST_1904 = (int32_t) 19,
    FLR_SYSINFO_BOSON_MIPI_1407 = (int32_t) 20,
    FLR_SYSINFO_BOSON_MIPI_1406 = (int32_t) 21,
    FLR_SYSINFO_BOSON_BASE_1407 = (int32_t) 22,
    FLR_SYSINFO_BOSON_BASE_1406 = (int32_t) 23,
    FLR_SYSINFO_BOSON_MIPI_1904 = (int32_t) 24,
};
typedef enum e_FLR_SYSINFO_SW_CONFIG_ID_E FLR_SYSINFO_SW_CONFIG_ID_E;

enum e_FLR_SYSINFO_SW_PERMISSIONS_E {
    FLR_SYSINFO_FACTORY = (int32_t) 0,
    FLR_SYSINFO_USER = (int32_t) 1,
};
typedef enum e_FLR_SYSINFO_SW_PERMISSIONS_E FLR_SYSINFO_SW_PERMISSIONS_E;

enum e_FLR_SYSINFO_PROBE_TIP_MODEL_E {
    FLR_SYSINFO_PTM_UNKNOWN = (int32_t) 0,
    FLR_SYSINFO_PTM_VSC_IR32 = (int32_t) 1,
    FLR_SYSINFO_PTM_VSC_IR21 = (int32_t) 2,
    FLR_SYSINFO_PTM_VS80CIR_21 = (int32_t) 3,
    FLR_SYSINFO_PTM_VSC_IR33 = (int32_t) 4,
    FLR_SYSINFO_PTM_LAST = (int32_t) 5,
};
typedef enum e_FLR_SYSINFO_PROBE_TIP_MODEL_E FLR_SYSINFO_PROBE_TIP_MODEL_E;

enum e_FLR_SYSTEMSYMBOLS_SYMBOL_E {
    FLR_SYSTEMSYMBOLS_FFC_IMMINENT = (int32_t) 0,
    FLR_SYSTEMSYMBOLS_FFC_DESIRED = (int32_t) 1,
    FLR_SYSTEMSYMBOLS_TABLE_SWITCH_DESIRED = (int32_t) 2,
    FLR_SYSTEMSYMBOLS_LOW_GAIN = (int32_t) 3,
    FLR_SYSTEMSYMBOLS_OVERTEMP = (int32_t) 4,
    FLR_SYSTEMSYMBOLS_SPOTMETER = (int32_t) 5,
    FLR_SYSTEMSYMBOLS_ISOTHERM = (int32_t) 6,
    FLR_SYSTEMSYMBOLS_SYMBOL_LAST = (int32_t) 7,
};
typedef enum e_FLR_SYSTEMSYMBOLS_SYMBOL_E FLR_SYSTEMSYMBOLS_SYMBOL_E;

enum e_FLR_SYSTEMSYMBOLS_ID_TYPE_E {
    FLR_SYSTEMSYMBOLS_ELEMENT = (int32_t) 0,
    FLR_SYSTEMSYMBOLS_GROUP = (int32_t) 1,
    FLR_SYSTEMSYMBOLS_ID_LAST = (int32_t) 2,
};
typedef enum e_FLR_SYSTEMSYMBOLS_ID_TYPE_E FLR_SYSTEMSYMBOLS_ID_TYPE_E;

enum e_FLR_SYSTEMSYMBOLS_STATE_E {
    FLR_SYSTEMSYMBOLS_ENTERED = (int32_t) 0,
    FLR_SYSTEMSYMBOLS_EXITED = (int32_t) 1,
    FLR_SYSTEMSYMBOLS_STATE_LAST = (int32_t) 2,
};
typedef enum e_FLR_SYSTEMSYMBOLS_STATE_E FLR_SYSTEMSYMBOLS_STATE_E;

enum e_FLR_TELEMETRY_LOC_E {
    FLR_TELEMETRY_LOC_TOP = (int32_t) 0,
    FLR_TELEMETRY_LOC_BOTTOM = (int32_t) 1,
    FLR_TELEMETRY_LOC_END = (int32_t) 2,
};
typedef enum e_FLR_TELEMETRY_LOC_E FLR_TELEMETRY_LOC_E;

enum e_FLR_TELEMETRY_PACKING_E {
    FLR_TELEMETRY_PACKING_DEFAULT = (int32_t) 0,
    FLR_TELEMETRY_PACKING_Y = (int32_t) 1,
    FLR_TELEMETRY_PACKING_8BITS = (int32_t) 2,
    FLR_TELEMETRY_PACKING_END = (int32_t) 3,
};
typedef enum e_FLR_TELEMETRY_PACKING_E FLR_TELEMETRY_PACKING_E;

enum e_FLR_TELEMETRY_ORDER_E {
    FLR_TELEMETRY_ORDER_DEFAULT = (int32_t) 0,
    FLR_TELEMETRY_ORDER_SWAP16B = (int32_t) 1,
    FLR_TELEMETRY_ORDER_END = (int32_t) 2,
};
typedef enum e_FLR_TELEMETRY_ORDER_E FLR_TELEMETRY_ORDER_E;

enum e_FLR_TESTRAMP_TYPE_E {
    FLR_TESTRAMP_ZERO = (int32_t) 0,
    FLR_TESTRAMP_INCREMENTING = (int32_t) 1,
    FLR_TESTRAMP_VERT_SHADE = (int32_t) 2,
    FLR_TESTRAMP_HORIZ_SHADE = (int32_t) 3,
    FLR_TESTRAMP_BIG_VERT_SHADE = (int32_t) 4,
    FLR_TESTRAMP_SIMPLE_VERTICAL = (int32_t) 5,
    FLR_TESTRAMP_VTST_CHECKERBOARD = (int32_t) 6,
    FLR_TESTRAMP_VTST_DIAGONAL_STRIPE = (int32_t) 7,
    FLR_TESTRAMP_VTST_MOVING_LINE_BLACK = (int32_t) 8,
    FLR_TESTRAMP_VTST_DIAGONAL_LR = (int32_t) 9,
    FLR_TESTRAMP_VTST_DIAGONAL_RL = (int32_t) 10,
    FLR_TESTRAMP_PN9_FILL = (int32_t) 11,
    FLR_TESTRAMP_HORIZ_BARS = (int32_t) 12,
    FLR_TESTRAMP_VERT_BARS = (int32_t) 13,
    FLR_TESTRAMP_BPR_MAP = (int32_t) 14,
    FLR_TESTRAMP_CORN_2_CORN = (int32_t) 15,
    FLR_TESTRAMP_PN9_CONTINUOUS = (int32_t) 16,
    FLR_TESTRAMP_PSEUDORANDOM = (int32_t) 17,
    FLR_TESTRAMP_DMA_LAST = (int32_t) 18,
    FLR_TESTRAMP_ONSHAVE_START = (int32_t) 30,
    FLR_TESTRAMP_ONSHAVE_VERT_SHADE = (int32_t) 30,
    FLR_TESTRAMP_ONSHAVE_HORIZ_SHADE = (int32_t) 31,
    FLR_TESTRAMP_ONSHAVE_DIAG_SHADE = (int32_t) 32,
    FLR_TESTRAMP_ONSHAVE_ANIMATION = (int32_t) 33,
    FLR_TESTRAMP_TYPE_LAST = (int32_t) 34,
};
typedef enum e_FLR_TESTRAMP_TYPE_E FLR_TESTRAMP_TYPE_E;

enum e_FLR_TF_MOTION_MODE_E {
    FLR_TF_MOTION_MODE_FRAME_BASED = (int32_t) 0,
    FLR_TF_MOTION_MODE_MOTION_BASED = (int32_t) 1,
    FLR_TF_MOTION_MODE_END = (int32_t) 2,
};
typedef enum e_FLR_TF_MOTION_MODE_E FLR_TF_MOTION_MODE_E;

enum e_FLR_UART_STARTUP_BAUDRATE_E {
    FLR_UART_921600_BAUD = (int32_t) 0,
    FLR_UART_460800_BAUD = (int32_t) 1,
    FLR_UART_230400_BAUD = (int32_t) 2,
    FLR_UART_115200_BAUD = (int32_t) 3,
    FLR_UART_57600_BAUD = (int32_t) 4,
    FLR_UART_38400_BAUD = (int32_t) 5,
    FLR_UART_19200_BAUD = (int32_t) 6,
    FLR_UART_14400_BAUD = (int32_t) 7,
    FLR_UART_9600_BAUD = (int32_t) 8,
    FLR_UART_4800_BAUD = (int32_t) 9,
    FLR_UART_2400_BAUD = (int32_t) 10,
    FLR_UART_1200_BAUD = (int32_t) 11,
    FLR_UART_600_BAUD = (int32_t) 12,
    FLR_UART_300_BAUD = (int32_t) 13,
    FLR_UART_110_BAUD = (int32_t) 14,
    FLR_UART_BAUDRATE_END = (int32_t) 15,
};
typedef enum e_FLR_UART_STARTUP_BAUDRATE_E FLR_UART_STARTUP_BAUDRATE_E;

#endif //ENUM_TYPES_H

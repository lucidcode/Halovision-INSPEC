/* ${REA_DISCLAIMER_PLACEHOLDER} */
/******************************************************************************
 Includes   <System Includes> , "Project Includes"
 ******************************************************************************/
#include "r_usb_basic_api.h"
#include "r_usb_phid_api.h"

/******************************************************************************
 Macro definitions
 ******************************************************************************/
#define USB_BCDNUM               (0x0200U)                               /* bcdUSB */
#define USB_RELEASE              (0x0200U)                               /* Release Number */
#define USB_CONFIGNUM            (1U)                                    /* Configuration number */
#define USB_DCPMAXP              (64U)                                   /* DCP max packet size */

#define USB_IFPROTOCOL           (USB_IFPRO_KBD)
#define ITEM_LEN                 (76U)
#define ITEM_LEN2                (50U)

#define MXPS                     (8U)
#define NUM_EP                   (1U)

/* [Vendor ID & Product ID setting] */
#define USB_VENDORID             (0x0000U)
#define USB_PRODUCTID            (0x0013U)

/* Descriptor length */
#define NUM_STRING_DESCRIPTOR    (6U)
/* Configuration Descriptor Length */
#define CD_LEN                   (59U)

/* Descriptor data Mask */
#define USB_UCHAR_MAX            (0xffU)
#define USB_W_TOTAL_LENGTH_MASK  (256U)
#define USB_VALUE_32             (32)
#define USB_VALUE_100            (100)
#define USB_UCHAR_MAX            (0xffU)
#define USB_VALUE_22H            (0x22U)
#define USB_VALUE_25H            (0x25U)
#define USB_VALUE_26H            (0x26U)
#define USB_VALUE_29H            (0x29U)
#define USB_VALUE_30H            (0x30U)
#define USB_VALUE_31H            (0x31U)
#define USB_VALUE_65H            (0x65U)
#define USB_VALUE_75H            (0x75U)
#define USB_VALUE_7FH            (0x7FU)
#define USB_VALUE_95H            (0x95U)
#define USB_VALUE_81H            (0x81U)
#define USB_VALUE_91H            (0x91U)
#define USB_VALUE_A1H            (0xA1U)
#define USB_VALUE_C0H            (0xC0U)
#define USB_VALUE_E7H            (0xE7U)
#define USB_VALUE_FFH            (0xFFU)

/************************************************************
 *  Device Descriptor                                       *
 ************************************************************/
uint8_t g_apl_device[] =
{
    USB_DD_BLENGTH,                                                      /*  0:bLength */
    USB_DT_DEVICE,                                                       /*  1:bDescriptorType */
    (uint8_t) ( USB_BCDNUM & (uint8_t) USB_UCHAR_MAX),                   /*  2:bcdUSB_lo */
    (uint8_t) ((uint8_t) (USB_BCDNUM >> 8) & (uint8_t) USB_UCHAR_MAX),   /*  3:bcdUSB_hi */
    0x00,                                                                /*  4:bDeviceClass */
    0x00,                                                                /*  5:bDeviceSubClass */
    0x00,                                                                /*  6:bDeviceProtocol */
    (uint8_t) USB_DCPMAXP,                                               /*  7:bMAXPacketSize(for DCP) */
    (uint8_t) (USB_VENDORID & (uint8_t) USB_UCHAR_MAX),                  /*  8:idVendor_lo */
    (uint8_t) ((uint8_t) (USB_VENDORID >> 8) & (uint8_t) USB_UCHAR_MAX), /*  9:idVendor_hi */
    (uint8_t) (USB_PRODUCTID & (uint8_t) USB_UCHAR_MAX),                 /* 10:idProduct_lo */
    (uint8_t) ((uint8_t) (USB_PRODUCTID >> 8) & (uint8_t) USB_UCHAR_MAX),/* 11:idProduct_hi */
    (uint8_t) (USB_RELEASE & (uint8_t) USB_UCHAR_MAX),                   /* 12:bcdDevice_lo */
    (uint8_t) ((uint8_t) (USB_RELEASE >> 8) & (uint8_t) USB_UCHAR_MAX),  /* 13:bcdDevice_hi */
    1,                                                                   /* 14:iManufacturer */
    2,                                                                   /* 15:iProduct */
    3,                                                                   /* 16:iSerialNumber */
    USB_CONFIGNUM,                                                       /* 17:bNumConfigurations */
};

/************************************************************
 *  Configuration Descriptor                                *
 ************************************************************/
uint8_t g_apl_configuration[CD_LEN + (CD_LEN % 2)] =
{
    USB_CD_BLENGTH,                                             /*  0:bLength */
    USB_DT_CONFIGURATION,                                       /*  1:bDescriptorType */
    (uint8_t) (CD_LEN % USB_W_TOTAL_LENGTH_MASK),               /*  2:wTotalLength(L) */
    (uint8_t) (CD_LEN / USB_W_TOTAL_LENGTH_MASK),               /*  3:wTotalLength(H) */
    2,                                                          /*  4:bNumInterfaces */
    1,                                                          /*  5:bConfigurationValue */
    4,                                                          /*  6:iConfiguration */
    (uint8_t) (USB_CF_RESERVED | USB_CF_SELFP | USB_CF_RWUPON), /*  7:bmAttributes */
    (uint8_t) (USB_VALUE_100 / 2),                              /*  8:bMaxPower (2mA unit) */

    /* Interface Descriptor */
    USB_ID_BLENGTH,                                             /*  0:bLength */
    USB_DT_INTERFACE,                                           /*  1:bDescriptor */
    0,                                                          /*  2:bInterfaceNumber */
    0,                                                          /*  3:bAlternateSetting */
    NUM_EP,                                                     /*  4:bNumEndpoints */
    USB_IFCLS_HID,                                              /*  5:bInterfaceClass(HID) */
    USB_IFSUB_NOBOOT,                                           /*  6:bInterfaceSubClass(NonBOOT) */
    USB_IFPROTOCOL,                                             /*  7:bInterfaceProtocol */
    0,                                                          /*  8:iInterface */

    /* HID Descriptor */
    9,                                                          /*  0:bLength */
    USB_DT_TYPE_HIDDESCRIPTOR,                                  /*  1:bDescriptor */
    0x00,                                                       /*  2:HID Ver */
    0x01,                                                       /*  3:HID Ver */
    0x00,                                                       /*  4:bCountryCode */
    0x01,                                                       /*  5:bNumDescriptors */
    USB_VALUE_22H,                                              /*  6:bDescriptorType */
    ITEM_LEN,                                                   /*  7:wItemLength(L) */
    0x00,                                                       /*  8:wItemLength(H) */

    /* Endpoint Descriptor 0 */
    USB_ED_BLENGTH,                                             /*  0:bLength */
    USB_DT_ENDPOINT,                                            /*  1:bDescriptorType */
    (uint8_t) (USB_EP_IN | USB_EP1),                            /*  2:bEndpointAddress */
    USB_EP_INT,                                                 /*  3:bmAttribute */
    MXPS,                                                       /*  4:wMaxPacketSize_lo */
    0,                                                          /*  5:wMaxPacketSize_hi */
    0x0A,                                                       /*  6:bInterval */

/* Human Iterface Device Class2 */

    /* Interface Descriptor */
    USB_ID_BLENGTH,                                             /*  0:bLength */
    USB_DT_INTERFACE,                                           /*  1:bDescriptor */
    1,                                                          /*  2:bInterfaceNumber */
    0,                                                          /*  3:bAlternateSetting */
    NUM_EP,                                                     /*  4:bNumEndpoints */
    USB_IFCLS_HID,                                              /*  5:bInterfaceClass(HID) */
    USB_IFSUB_NOBOOT,                                           /*  6:bInterfaceSubClass(NonBOOT) */
    USB_IFPRO_MSE,                                              /*  7:bInterfaceProtocol */
    0,                                                          /*  8:iInterface */

    /* HID Descriptor */
    9,                                                          /*  0:bLength */
    USB_DT_TYPE_HIDDESCRIPTOR,                                  /*  1:bDescriptor */
    0x00,                                                       /*  2:HID Ver */
    0x01,                                                       /*  3:HID Ver */
    0x00,                                                       /*  4:bCountryCode */
    0x01,                                                       /*  5:bNumDescriptors */
    USB_VALUE_22H,                                              /*  6:bDescriptorType */
    ITEM_LEN2,                                                  /*  7:wItemLength(L) */
    0x00,                                                       /*  8:wItemLength(H) */

    /* Endpoint Descriptor 1 */
    USB_ED_BLENGTH,                                             /*  0:bLength */
    USB_DT_ENDPOINT,                                            /*  1:bDescriptorType */
    (uint8_t) (USB_EP_IN | USB_EP2),                            /*  2:bEndpointAddress */
    USB_EP_INT,                                                 /*  3:bmAttribute */
    MXPS,                                                       /*  4:wMaxPacketSize_lo */
    0,                                                          /*  5:wMaxPacketSize_hi */
    0x0A,                                                       /*  6:bInterval */
} ;

/************************************************************
 *  String Descriptor 0                                     *
 ************************************************************/
/* UNICODE 0x0409 English (United States) */
uint8_t g_apl_string0[] =
{
    4,                                                          /*  0:bLength */
    USB_DT_STRING,                                              /*  1:bDescriptorType */
    0x09, 0x04                                                  /*  2:wLANGID[0] */
};

/************************************************************
 *  String Descriptor 1                                     *
 ************************************************************/
/* 14:iManufacturer */
uint8_t g_apl_string1[] =
{
    16,                                                         /*  0:bLength */
    USB_DT_STRING,                                              /*  1:bDescriptorType */
    'R', 0x00,
    'e', 0x00,
    'n', 0x00,
    'e', 0x00,
    's', 0x00,
    'a', 0x00,
    's', 0x00,
};

/************************************************************
 *  String Descriptor 2                                     *
 ************************************************************/
/* 15:iProduct */

uint8_t g_apl_string2[] =
{
    USB_VALUE_32,       /*  0:bLength */
    USB_DT_STRING,      /*  1:bDescriptorType */
    'U', 0x00,
    'S', 0x00,
    'B', 0x00,
    ' ', 0x00,
    'P', 0x00,
    'e', 0x00,
    'r', 0x00,
    'i', 0x00,
    ' ', 0x00,
    'H', 0x00,
    'I', 0x00,
    'D', 0x00,
    ' ', 0x00,
    'F', 0x00,
    'W', 0x00,
};

/************************************************************
 *  String Descriptor 3                                     *
 ************************************************************/
/* 16:iSerialNumber */
uint8_t g_apl_string3[] =
{
    10,                 /*  0:bLength */
    USB_DT_STRING,      /*  1:bDescriptorType */
    'P', 0x00,
    '0', 0x00,
    '0', 0x00,
    '1', 0x00,
};

/************************************************************
 *  String Descriptor 4(iConfiguration)                     *
 ************************************************************/
uint8_t g_apl_string4[] =
{
    18,                 /*  0:bLength */
    USB_DT_STRING,      /*  1:bDescriptorType */

     /*  2:bString */
    'K', 0x00,
    'e', 0x00,
    'y', 0x00,
    'B', 0x00,
    'o', 0x00,
    'a', 0x00,
    'r', 0x00,
    'd', 0x00
};

/************************************************************
 *  String Descriptor 5(iConfiguration)                     *
 ************************************************************/
uint8_t g_apl_string5[] =
{
    12,                 /*  0:bLength */
    USB_DT_STRING,      /*  1:bDescriptorType */

     /*  2:bString */
    'M', 0x00,
    'o', 0x00,
    'u', 0x00,
    's', 0x00,
    'e', 0x00,
};

/************************************************************
 *  String Descriptor Table address                         *
 ************************************************************/
uint8_t * g_apl_string_table[] =
{
    g_apl_string0,                                  /* UNICODE 0x0409 English (United States) */
    g_apl_string1,                                  /* iManufacturer */
    g_apl_string2,                                  /* iProduct */
    g_apl_string3,                                  /* iSerialNumber */
    g_apl_string4,                                  /* iConfiguration */
    g_apl_string5,                                  /* iConfiguration */
};

/************************************************************
 *  HID Report Discriptor for Keyboard                      *
 ************************************************************/
const uint8_t g_apl_report[] =
{
    0x05, 0x01,                                     /* Usage Page (Generic Desktop) */
    0x09, 0x06,                                     /* Usage (Keyboard) */
    USB_VALUE_A1H, 0x01,                            /* Collection (Application) */
    0x05, 0x07,                                     /* Usage Page (Key Codes); */
    0x19, 0xE0,                                     /* Usage Minimum (224) */
    USB_VALUE_29H, USB_VALUE_E7H,                   /* Usage Maximum (231) */
    0x15, 0x00,                                     /* Logical Minimum (0) */
    USB_VALUE_25H, 0x01,                            /* Logical Maximum (1) */
    USB_VALUE_75H, 0x01,                            /* Report Size (1) */
    USB_VALUE_95H, 0x08,                            /* Report Count (8) */
    USB_VALUE_81H, 0x02,                            /* Input (Data , Variable , Absolute)  ;Modifier byte */
    0x95, 0x01,                                     /* Report Count (1) */
    USB_VALUE_75H, 0x08,                            /* Report Size (8) */
    USB_VALUE_81H, 0x01,                            /* Input (Constant) ;Reserved byte */
    USB_VALUE_95H, 0x05,                            /* Report Count (5) */
    USB_VALUE_75H, 0x01,                            /* Report Size (1) */
    0x05, 0x08,                                     /* Usage Page (Page# for LEDs) */
    0x19, 0x01,                                     /* Usage Minimum (1) */
    USB_VALUE_29H, 0x05,                            /* Usage Maximum (5) */
    USB_VALUE_91H, 0x02,                            /* Output (Data , Variable , Absolute)  ;LED report */
    USB_VALUE_95H, 0x01,                            /* Report Count (1) */
    USB_VALUE_75H, 0x03,                            /* Report Size (3) */
    USB_VALUE_91H, 0x01,                            /* Output (Constant) ;LED report padding */
    USB_VALUE_95H, 0x06,                            /* Report Count (6) */
    USB_VALUE_75H, 0x08,                            /* Report Size (8) */
    0x15, 0x00,                                     /* Logical Minimum (0) */
    USB_VALUE_25H, USB_VALUE_65H,                   /* Logical Maximum(101) */
    0x05, 0x07,                                     /* Usage Page (Key Codes) */
    0x19, 0x00,                                     /* Usage Minimum (0) */
    USB_VALUE_29H, USB_VALUE_65H,                   /* Usage Maximum (101) */
    USB_VALUE_81H, 0x00,                            /* Input (Data , Array)  ;Key arrays (6 bytes) */

    /* *** The OUTPUT REPORT *** */
    0x09, 0x00,                                     /* Usage ID within this page (Vendor defined)*/
    0x15, 0x00,                                     /* Logical Min 0 */
    USB_VALUE_26H, USB_VALUE_FFH, 0x00,             /* Logical Max 255 */
    USB_VALUE_75H, 0x08,                            /* Size 8 Bits (Each Field will be 8bits) */
    USB_VALUE_95H, 0x01,                            /* Count (Number of fields(bytes) in OUTPUT report) */
    USB_VALUE_91H, 0x02,                            /* Output Report - type variable data */
    0xC0,                                           /* End Collection */
};

/************************************************************
 *  HID Report Discriptor for Mouse                         *
 ************************************************************/
const uint8_t g_apl_report_mouse[] =
{
    0x05, 0x01,                                     /* Usage Page (Generic Desktop)                    */
    0x09, 0x02,                                     /* Usage (Mouse)                                   */
    USB_VALUE_A1H, 0x01,                            /* Collection (Application)                        */
    0x09, 0x01,                                     /* Usage (Pointer)                                 */
    USB_VALUE_A1H, 0x00,                            /* Collection (Physical)                           */
    0x05, 0x09,                                     /* Usage Page (Buttons)                            */
    0x19, 0x01,                                     /* Usage Minimum (01)                              */
    USB_VALUE_29H, 0x03,                            /* Usage Maximun (03)                              */
    0x15, 0x00,                                     /* Logical Minimum (0)                             */
    USB_VALUE_25H, 0x01,                            /* Logical Maximum (1)                             */
    USB_VALUE_95H, 0x03,                            /* Report Count (3)                                */
    USB_VALUE_75H, 0x01,                            /* Report Size (1)                                 */
    USB_VALUE_81H, 0x02,                            /* Input (Data, Variable, Absolute); 3 button bits */
    USB_VALUE_95H, 0x01,                            /* Report Count (1)                                */
    USB_VALUE_75H, 0x05,                            /* Report Size (5)                                 */
    USB_VALUE_81H, 0x01,                            /* Input (Constant), ;5 bit padding                */
    0x05, 0x01,                                     /* Usage Page (Generic Desktop)                    */
    0x09, USB_VALUE_30H,                            /* Usage (X)                                       */
    0x09, USB_VALUE_31H,                            /* Usage (Y)                                       */
    0x15, USB_VALUE_81H,                            /* Logical Minimum (-127)                          */
    USB_VALUE_25H, USB_VALUE_7FH,                   /* Logical Maximum (127)                           */
    USB_VALUE_75H, 0x08,                            /* Report Size (8)                                 */
    USB_VALUE_95H, 0x02,                            /* Report Count (2)                                */
    USB_VALUE_81H, 0x06,                            /* Input (Data,Variable,Relative): 2position bytes(X & Y) */
    USB_VALUE_C0H,                                  /* End Collection                                  */
    USB_VALUE_C0H,                                  /* End Collection                                  */
};

const usb_descriptor_t g_usb_descriptor =
{
    g_apl_device,                   /* Pointer to the device descriptor */
    g_apl_configuration,            /* Pointer to the configuration descriptor for Full-speed */
    NULL,                           /* Pointer to the configuration descriptor for Hi-speed */
    NULL,                           /* Pointer to the qualifier descriptor */
    g_apl_string_table,             /* Pointer to the string descriptor table */
    NUM_STRING_DESCRIPTOR
};

/******************************************************************************
 End  Of File
 ******************************************************************************/

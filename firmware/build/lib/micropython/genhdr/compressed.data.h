#define MP_MAX_UNCOMPRESSED_TEXT_LEN (73)
MP_COMPRESSED_DATA("mus\364b\345argumen\364no\364argument\363can'\364invali\344supporte\344functio\356o\346'%q\247i\363forma\364inpu\364fo\362t\357Invali\344doesn'\364lengt\350typ\345objec\364arra\371ndarra\371'%s\247implemente\344to\357Faile\344a\356inde\370ndarray\363define\344intege\362\341wron\347conver\364operatio\356ou\364positiona\354th\345Expecte\344array\363%\344o\362an\344onl\371wit\350expect\363keywor\344require\344require\363empt\371shap\345specifie\362unsupporte\344strin\347ha\363i\356canno\364strea\355exis\364palett\345rang\345tupl\345unknow\356sequenc\345ar\347dimension\363floa\364imag\345outpu\364attribut\345availabl\345betwee\356Unsupporte\344expecte\344firs\364isn'\364need\363Error\272UUI\304buffe\362matri\370senso\362shoul\344Unexpecte\344assignmen\364identifie\362\260outsid\345suppor\364<\275dtyp\345fro\355generato\362give\356man\371siz\345tha\356valu\345integer\363iterabl\345multipl\345n\357positiv\345lis\364lon\347%\363addres\363comple\370dimensions\241equa\354erro\362fiel\344indice\363larg\345missin\347conversio\356scratchpa\344unexpecte\3441\304nativ\345numbe\362offse\364range\363synta\370\262axi\363bu\364")
MP_MATCH_COMPRESSED("%c needs int or char", "\377%c\315int\252char")
MP_MATCH_COMPRESSED("%d maximum banks", "\377\251maximum banks")
MP_MATCH_COMPRESSED("%q index out of range", "\377%q\234\244\211\275")
MP_MATCH_COMPRESSED("%q indices must be integers, not %s", "\377%q\361\200\201integers,\203\352")
MP_MATCH_COMPRESSED("%q() takes %d positional arguments but %d were given", "\377%q() takes\251\245\204\377\251were\336")
MP_MATCH_COMPRESSED("%s", "\377\352")
MP_MATCH_COMPRESSED("'%q' argument required", "\377\212\202\260")
MP_MATCH_COMPRESSED("'%s' expects a label", "\377\227\256\240label")
MP_MATCH_COMPRESSED("'%s' expects a register", "\377\227\256\240register")
MP_MATCH_COMPRESSED("'%s' expects a special register", "\377\227\256\240special register")
MP_MATCH_COMPRESSED("'%s' expects an FPU register", "\377\227\256\233FPU register")
MP_MATCH_COMPRESSED("'%s' expects an address of the form [a, b]", "\377\227\256\233\353\211\246form [a, b]")
MP_MATCH_COMPRESSED("'%s' expects an integer", "\377\227\256\233\237")
MP_MATCH_COMPRESSED("'%s' expects at most r%d", "\377\227\256at most r%d")
MP_MATCH_COMPRESSED("'%s' expects {r0, r1, ...}", "\377\227\256{r0, r1, ...}")
MP_MATCH_COMPRESSED("'%s' integer 0x%x doesn't fit in mask 0x%x", "\377\227\2370x%x\221fit\270mask 0x%x")
MP_MATCH_COMPRESSED("'%s' object doesn't support item assignment", "\377\227\224\221\331item\325")
MP_MATCH_COMPRESSED("'%s' object doesn't support item deletion", "\377\227\224\221\331item deletion")
MP_MATCH_COMPRESSED("'%s' object has no attribute '%q'", "\377\227\224\267\346\306\212")
MP_MATCH_COMPRESSED("'%s' object isn't an iterator", "\377\227\224\314\233iterator")
MP_MATCH_COMPRESSED("'%s' object isn't callable", "\377\227\224\314callable")
MP_MATCH_COMPRESSED("'%s' object isn't iterable", "\377\227\224\314\344")
MP_MATCH_COMPRESSED("'%s' object isn't subscriptable", "\377\227\224\314subscriptable")
MP_MATCH_COMPRESSED("'=' alignment not allowed in string format specifier", "\377'=' alignment\203allowed\270\266\214\264")
MP_MATCH_COMPRESSED("'align' requires 1 argument", "\377'align'\2611\202")
MP_MATCH_COMPRESSED("'await' outside function", "\377'await'\330\210")
MP_MATCH_COMPRESSED("'break'/'continue' outside loop", "\377'break'/'continue'\330loop")
MP_MATCH_COMPRESSED("'data' requires at least 2 arguments", "\377'data'\261at least\375\204")
MP_MATCH_COMPRESSED("'data' requires integer arguments", "\377'data'\261\237\204")
MP_MATCH_COMPRESSED("'label' requires 1 argument", "\377'label'\2611\202")
MP_MATCH_COMPRESSED("'not' not implemented", "\377'not'\203\230")
MP_MATCH_COMPRESSED("'return' outside function", "\377'return'\330\210")
MP_MATCH_COMPRESSED("'yield' outside function", "\377'yield'\330\210")
MP_MATCH_COMPRESSED("* arg after **", "\377*\301after **")
MP_MATCH_COMPRESSED("*x must be assignment target", "\377*x\200\201\325target")
MP_MATCH_COMPRESSED("0 bytes transferred!", "\377\327bytes transferred!")
MP_MATCH_COMPRESSED("0.0 to a complex power", "\3770.0\217\240\354power")
MP_MATCH_COMPRESSED("AP required", "\377AP\260")
MP_MATCH_COMPRESSED("Alpha palette must be 256 pixels!", "\377Alpha\274\200\201256 pixels!")
MP_MATCH_COMPRESSED("Alpha palette must be GRAYSCALE!", "\377Alpha\274\200\201GRAYSCALE!")
MP_MATCH_COMPRESSED("Alpha ranges between 0 and 255", "\377Alpha\373\310\327\253255")
MP_MATCH_COMPRESSED("Buffer is too small", "\377Buffer\213\231small")
MP_MATCH_COMPRESSED("CAN bus not enabled", "\377CAN bus\203enabled")
MP_MATCH_COMPRESSED("CAN data field too long", "\377CAN data\360\231\351")
MP_MATCH_COMPRESSED("CAN filter parameter error", "\377CAN filter parameter\357")
MP_MATCH_COMPRESSED("CAN(%d) doesn't exist", "\377CAN(%d)\221\273")
MP_MATCH_COMPRESSED("CERT_REQUIRED requires server_hostname", "\377CERT_REQUIRED\261server_hostname")
MP_MATCH_COMPRESSED("Can't convert %s to %s", "\377Can't\242\352\217\352")
MP_MATCH_COMPRESSED("Can't convert to bitmap in place!", "\377Can't\242\217bitmap\270place!")
MP_MATCH_COMPRESSED("Channel ranges between 1 and 8", "\377Channel\373\3101\2538")
MP_MATCH_COMPRESSED("Color palette must be 256 pixels", "\377Color\274\200\201256 pixels")
MP_MATCH_COMPRESSED("Color palette must be 256 pixels!", "\377Color\274\200\201256 pixels!")
MP_MATCH_COMPRESSED("Color palette must be RGB565!", "\377Color\274\200\201RGB565!")
MP_MATCH_COMPRESSED("Compression Failed!", "Compression Failed!")
MP_MATCH_COMPRESSED("Descriptor type is not supported", "\377Descriptor\223\213\203\207")
MP_MATCH_COMPRESSED("Descriptors have different types!", "Descriptors have different types!")
MP_MATCH_COMPRESSED("Display does not support backlight control.", "\377Display does\203\331backlight control.")
MP_MATCH_COMPRESSED("End of stream", "\377End\211\272")
MP_MATCH_COMPRESSED("Error: 0 < scale!", "\377\316\327< scale!")
MP_MATCH_COMPRESSED("Error: 0 <= bias <= 1!", "\377\316\327\332bias\3321!")
MP_MATCH_COMPRESSED("Error: 0 <= percentile <= 1!", "\377\316\327\332percentile\3321!")
MP_MATCH_COMPRESSED("Error: 0.0 <= floating_threshold <= 1.0!", "\377\3160.0\332floating_threshold\3321.0!")
MP_MATCH_COMPRESSED("Error: 0.0 <= seed_threshold <= 1.0!", "\377\3160.0\332seed_threshold\3321.0!")
MP_MATCH_COMPRESSED("Error: 1 <= quality <= 100!", "\377\3161\332quality\332100!")
MP_MATCH_COMPRESSED("Expected a display controller", "\377\247\240display controller")
MP_MATCH_COMPRESSED("Expected a mutable image", "\377\247\240mutable\304")
MP_MATCH_COMPRESSED("Expected a ndarray with dtype float", "\377\247\240\226\255\333\303")
MP_MATCH_COMPRESSED("Expected a ndarray with shape (height, width) or (height, width, 3", "\377\247\240\226\255\263(height, width)\252(height, width, 3")
MP_MATCH_COMPRESSED("Expected an image buffer", "\377\247\233\304\320")
MP_MATCH_COMPRESSED("Expected an uncompressed image", "\377\247\233uncompressed\304")
MP_MATCH_COMPRESSED("Expected threshold between 0 and 100", "\377\247threshold\310\327\253100")
MP_MATCH_COMPRESSED("Expected version V1.0, V1.1, or V2.0", "\377\247version V1.0, V1.1,\252V2.0")
MP_MATCH_COMPRESSED("FFC Error!", "FFC Error!")
MP_MATCH_COMPRESSED("FFT is defined for ndarrays only", "\377FFT\213\236\216\235\254")
MP_MATCH_COMPRESSED("FFT is implemented for linear arrays only", "\377FFT\213\230\216linear\250\254")
MP_MATCH_COMPRESSED("FIR sensor is not initialized", "\377FIR\322\213\203initialized")
MP_MATCH_COMPRESSED("FOV must be > 0 and < 180!", "\377FOV\200\201>\327\253< 180!")
MP_MATCH_COMPRESSED("FPA Error!", "FPA Error!")
MP_MATCH_COMPRESSED("Failed to detect a supported FIR sensor.", "\377\232\217detect\240\207FIR sensor.")
MP_MATCH_COMPRESSED("Failed to detect a supported TV controller.", "\377\232\217detect\240\207TV controller.")
MP_MATCH_COMPRESSED("Failed to init the AMG8833!", "\377\232\217init\246AMG8833!")
MP_MATCH_COMPRESSED("Failed to init the Lepton!", "\377\232\217init\246Lepton!")
MP_MATCH_COMPRESSED("Failed to init the MLX90621!", "\377\232\217init\246MLX90621!")
MP_MATCH_COMPRESSED("Failed to init the MLX90640!", "\377\232\217init\246MLX90640!")
MP_MATCH_COMPRESSED("Failed to init the MLX90641!", "\377\232\217init\246MLX90641!")
MP_MATCH_COMPRESSED("Failed to load Haar cascade", "\377\232\217load Haar cascade")
MP_MATCH_COMPRESSED("Failed to read the AMG8833 sensor data!", "\377\232\217read\246AMG8833\322data!")
MP_MATCH_COMPRESSED("Failed to read the MLX90621 sensor data!", "\377\232\217read\246MLX90621\322data!")
MP_MATCH_COMPRESSED("Failed to read the MLX90640 sensor data!", "\377\232\217read\246MLX90640\322data!")
MP_MATCH_COMPRESSED("Failed to read the MLX90641 sensor data!", "\377\232\217read\246MLX90641\322data!")
MP_MATCH_COMPRESSED("Fifo must be 0", "\377Fifo\200\201\327")
MP_MATCH_COMPRESSED("Height must be > 0", "\377Height\200\201>\327")
MP_MATCH_COMPRESSED("Height must be even!", "\377Height\200\201even!")
MP_MATCH_COMPRESSED("I/O operation on closed file", "\377I/O\243on closed file")
MP_MATCH_COMPRESSED("I2C operation not supported", "\377I2C\243\203\207")
MP_MATCH_COMPRESSED("I2C(%d) doesn't exist", "\377I2C(%d)\221\273")
MP_MATCH_COMPRESSED("IRQ mode not supported", "\377IRQ mode\203\207")
MP_MATCH_COMPRESSED("IRQ not supported on given Pin", "\377IRQ\203\207on\336Pin")
MP_MATCH_COMPRESSED("IV", "IV")
MP_MATCH_COMPRESSED("Image format is not supported", "\377Image\214\213\203\207")
MP_MATCH_COMPRESSED("Image height must be > 0", "\377Image height\200\201>\327")
MP_MATCH_COMPRESSED("Image width must be > 0", "\377Image width\200\201>\327")
MP_MATCH_COMPRESSED("Incompatible arguments!", "Incompatible arguments!")
MP_MATCH_COMPRESSED("Input shape does not match the model input shape", "\377Input\263does\203match\246model\215\263")
MP_MATCH_COMPRESSED("Intensity ranges between 0 (off) and 100 (full on)", "\377Intensity\373\310\327(off)\253100 (full on)")
MP_MATCH_COMPRESSED("Invalid Height!", "\377\220Height!")
MP_MATCH_COMPRESSED("Invalid LAN interface %d", "\377\220LAN interface\251")
MP_MATCH_COMPRESSED("Invalid Pixel Format", "\377\220Pixel Format")
MP_MATCH_COMPRESSED("Invalid ROI dimensions!", "\377\220ROI\355")
MP_MATCH_COMPRESSED("Invalid Refresh Rate!", "\377\220Refresh Rate!")
MP_MATCH_COMPRESSED("Invalid Width!", "\377\220Width!")
MP_MATCH_COMPRESSED("Invalid color palette", "\377\220color\274")
MP_MATCH_COMPRESSED("Invalid frame size", "\377\220frame\340")
MP_MATCH_COMPRESSED("Invalid image stream bpp", "\377\220\304\272bpp")
MP_MATCH_COMPRESSED("Invalid image stream pixformat", "\377\220\304\272pixformat")
MP_MATCH_COMPRESSED("Invalid pixel format", "\377\220pixel\214")
MP_MATCH_COMPRESSED("Invalid pixformat", "\377\220pixformat")
MP_MATCH_COMPRESSED("Invalid pre-defined color palette!", "\377\220pre-defined color palette!")
MP_MATCH_COMPRESSED("Invalid stream mode, expected 'R/r' or 'W/w'", "\377\220\272mode,\312'R/r'\252'W/w'")
MP_MATCH_COMPRESSED("Invalid stream offset", "\377\220\272\372")
MP_MATCH_COMPRESSED("Invalid stream type", "\377\220\272\223")
MP_MATCH_COMPRESSED("Invalid value %d for phy", "\377\220\342\251\216phy")
MP_MATCH_COMPRESSED("Kernel size too large!", "\377Kernel\340\231large!")
MP_MATCH_COMPRESSED("KernelSize must be >= 0!", "\377KernelSize\200\201>= 0!")
MP_MATCH_COMPRESSED("LED(%d) doesn't exist", "\377LED(%d)\221\273")
MP_MATCH_COMPRESSED("LHS of keyword arg must be an id", "\377LHS\211\257\301\200\201\233id")
MP_MATCH_COMPRESSED("MJPEG stream is closed", "\377MJPEG\272\213closed")
MP_MATCH_COMPRESSED("Not enough positional arguments!", "\377Not enough\245arguments!")
MP_MATCH_COMPRESSED("Only copying/cropping is supported for Bayer/YUV!", "\377Only copying/cropping\213\207\216Bayer/YUV!")
MP_MATCH_COMPRESSED("Operation not supported", "\377Operation\203\207")
MP_MATCH_COMPRESSED("Operation not supported by this FIR sensor", "\377Operation\203\207by this FIR\322")
MP_MATCH_COMPRESSED("Output shape has too many dimensions", "\377Output\263\267\231\337\302")
MP_MATCH_COMPRESSED("PHY Auto-negotiation failed.", "PHY Auto-negotiation failed.")
MP_MATCH_COMPRESSED("PHY Init failed.", "PHY Init failed.")
MP_MATCH_COMPRESSED("Pin doesn't exist", "\377Pin\221\273")
MP_MATCH_COMPRESSED("Pin(%q) does not have ADC capabilities", "\377Pin(%q) does\203have ADC capabilities")
MP_MATCH_COMPRESSED("Pixel format is not set or unsupported", "\377Pixel\214\213\203set\252\265")
MP_MATCH_COMPRESSED("Quality ranges between 0 and 100", "\377Quality\373\310\327\253100")
MP_MATCH_COMPRESSED("RGB channel can be 0, 1, or 2", "\377RGB channel can\2010, 1,\252\375")
MP_MATCH_COMPRESSED("ROI does not overlap on the image!", "\377ROI does\203overlap on\246image!")
MP_MATCH_COMPRESSED("ROI(w,h) != TEMPLATE_ROI(w,h)", "ROI(w,h) != TEMPLATE_ROI(w,h)")
MP_MATCH_COMPRESSED("Region of interest is bigger than image!", "\377Region\211interest\213bigger\341image!")
MP_MATCH_COMPRESSED("Region of interest is smaller than detector window!", "\377Region\211interest\213smaller\341detector window!")
MP_MATCH_COMPRESSED("Region of interest is smaller than template!", "\377Region\211interest\213smaller\341template!")
MP_MATCH_COMPRESSED("SDCard(%d) doesn't exist", "\377SDCard(%d)\221\273")
MP_MATCH_COMPRESSED("SPI(%d) doesn't exist", "\377SPI(%d)\221\273")
MP_MATCH_COMPRESSED("STA required", "\377STA\260")
MP_MATCH_COMPRESSED("SYS Error!", "SYS Error!")
MP_MATCH_COMPRESSED("Shutdown Failed", "\377Shutdown\232")
MP_MATCH_COMPRESSED("Sleep Failed", "\377Sleep\232")
MP_MATCH_COMPRESSED("Stream closed", "Stream closed")
MP_MATCH_COMPRESSED("Strength must be > 0!", "\377Strength\200\201> 0!")
MP_MATCH_COMPRESSED("TV controller is not initialized", "\377TV controller\213\203initialized")
MP_MATCH_COMPRESSED("The chosen CS is not available", "\377The chosen CS\213\203\307")
MP_MATCH_COMPRESSED("The image doesn't fit in the frame buffer!", "\377The\304\221fit\270\246frame buffer!")
MP_MATCH_COMPRESSED("The tuple/list must either be (x, y, w, h) or (w, h)", "\377The tuple/list\200either\201(x, y, w, h)\252(w, h)")
MP_MATCH_COMPRESSED("This function is unavailable on your OpenMV Cam.", "\377This\210\213unavailable on your OpenMV Cam.")
MP_MATCH_COMPRESSED("Timeout!", "Timeout!")
MP_MATCH_COMPRESSED("Timer doesn't exist", "\377Timer\221\273")
MP_MATCH_COMPRESSED("UART(%d) doesn't exist", "\377UART(%d)\221\273")
MP_MATCH_COMPRESSED("UUID", "\377\317")
MP_MATCH_COMPRESSED("UUID too long", "\377\317\231\351")
MP_MATCH_COMPRESSED("UUID too short", "\377\317\231short")
MP_MATCH_COMPRESSED("Unexpcted color palette format", "\377Unexpcted color\274\214")
MP_MATCH_COMPRESSED("Unexpected image geometry", "\377\324\304geometry")
MP_MATCH_COMPRESSED("Unexpected kernel dimensions!", "\377\324kernel\355")
MP_MATCH_COMPRESSED("Unexpected matrix dimensions!", "\377\324\321\355")
MP_MATCH_COMPRESSED("Unexpected tensor shape", "\377\324tensor\263")
MP_MATCH_COMPRESSED("Unsupported dtype", "\377\311\333")
MP_MATCH_COMPRESSED("Unsupported input type", "\377\311\215\223")
MP_MATCH_COMPRESSED("Unsupported input type. Expected a list", "\377\311\215type.\247\240\350")
MP_MATCH_COMPRESSED("Unsupported pixformat", "\377\311pixformat")
MP_MATCH_COMPRESSED("Vertical flip requires triple buffering!", "\377Vertical flip\261triple buffering!")
MP_MATCH_COMPRESSED("WDT(%d) doesn't exist", "\377WDT(%d)\221\273")
MP_MATCH_COMPRESSED("Width must be > 0", "\377Width\200\201>\327")
MP_MATCH_COMPRESSED("Width must be even!", "\377Width\200\201even!")
MP_MATCH_COMPRESSED("YUV422 images cannot be tranposed/rotated!", "\377YUV422 images\271\201tranposed/rotated!")
MP_MATCH_COMPRESSED("Zoom must be > 0!", "\377Zoom\200\201> 0!")
MP_MATCH_COMPRESSED("__init__() should return None, not '%s'", "\377__init__()\323return None,\203\227")
MP_MATCH_COMPRESSED("a_bins must be >= 2", "\377a_bins\200\201>=\375")
MP_MATCH_COMPRESSED("abort() called", "abort() called")
MP_MATCH_COMPRESSED("address %08x is not aligned to %d bytes", "\377\353%08x\213\203aligned\217\251bytes")
MP_MATCH_COMPRESSED("annotation must be an identifier", "\377annotation\200\201\233\326")
MP_MATCH_COMPRESSED("arange: cannot compute length", "\377arange:\271compute\222")
MP_MATCH_COMPRESSED("arg is an empty sequence", "\377\301\213\233\262\300")
MP_MATCH_COMPRESSED("arg must be user-type", "\377\301\200\201user-type")
MP_MATCH_COMPRESSED("argsort argument must be an ndarray", "\377argsort\202\200\201\233\226")
MP_MATCH_COMPRESSED("argsort is not implemented for flattened arrays", "\377argsort\213\203\230\216flattened\250")
MP_MATCH_COMPRESSED("argument must be None, an integer or a tuple of integers", "\377\202\200\201None,\233\237\252\240\276\211\343")
MP_MATCH_COMPRESSED("argument name reused", "\377\202name reused")
MP_MATCH_COMPRESSED("argument num/types mismatch", "\377\202num/types mismatch")
MP_MATCH_COMPRESSED("argument should be a '%q' not a '%q'", "\377\202\323\201\240\212\203\240\212")
MP_MATCH_COMPRESSED("arguments must be ndarrays", "\377\204\200\201\235")
MP_MATCH_COMPRESSED("array and index length must be equal", "\377\225\253\234\222\200\201\356")
MP_MATCH_COMPRESSED("array has too many dimensions", "\377\225\267\231\337\302")
MP_MATCH_COMPRESSED("array is too big", "\377\225\213\231big")
MP_MATCH_COMPRESSED("array/bytes required on right side", "\377array/bytes\260on right side")
MP_MATCH_COMPRESSED("async for/with outside async function", "\377async for/with\330async\210")
MP_MATCH_COMPRESSED("attempt to get (arg)min/(arg)max of empty sequence", "\377attempt\217get (arg)min/(arg)max\211\262\300")
MP_MATCH_COMPRESSED("attempt to get argmin/argmax of an empty sequence", "\377attempt\217get argmin/argmax\211\233\262\300")
MP_MATCH_COMPRESSED("attributes not supported", "\377attributes\203\207")
MP_MATCH_COMPRESSED("axis is out of bounds", "\377\376\213\244\211bounds")
MP_MATCH_COMPRESSED("axis must be None, or an integer", "\377\376\200\201None,\252\233\237")
MP_MATCH_COMPRESSED("axis too long", "\377\376\231\351")
MP_MATCH_COMPRESSED("b_bins must be >= 2", "\377b_bins\200\201>=\375")
MP_MATCH_COMPRESSED("bad compile mode", "bad compile mode")
MP_MATCH_COMPRESSED("bad flow mask", "bad flow mask")
MP_MATCH_COMPRESSED("bad inversion mask", "bad inversion mask")
MP_MATCH_COMPRESSED("bad typecode", "bad typecode")
MP_MATCH_COMPRESSED("binary op %q not implemented", "\377binary op %q\203\230")
MP_MATCH_COMPRESSED("bins must be >= 2", "\377bins\200\201>=\375")
MP_MATCH_COMPRESSED("bits must be 32 or less", "\377bits\200\20132\252less")
MP_MATCH_COMPRESSED("bits must be 8", "\377bits\200\2018")
MP_MATCH_COMPRESSED("blksize % 16", "blksize % 16")
MP_MATCH_COMPRESSED("branch not in range", "\377branch\203\270\275")
MP_MATCH_COMPRESSED("buffer is smaller than requested size", "\377\320\213smaller\341requested\340")
MP_MATCH_COMPRESSED("buffer size must be a multiple of element size", "\377\320\340\200\201\240\345\211element\340")
MP_MATCH_COMPRESSED("buffer too small", "\377\320\231small")
MP_MATCH_COMPRESSED("buffers must be the same length", "\377buffers\200\201\246same\222")
MP_MATCH_COMPRESSED("bytecode overflow", "bytecode overflow")
MP_MATCH_COMPRESSED("bytes value out of range", "\377bytes\342\244\211\275")
MP_MATCH_COMPRESSED("call super().__init__() first", "\377call super().__init__()\313")
MP_MATCH_COMPRESSED("can only have up to 4 parameters to Thumb assembly", "\377can\254have up\2174 parameters\217Thumb assembly")
MP_MATCH_COMPRESSED("can only specify one unknown dimension", "\377can\254specify one\277dimension")
MP_MATCH_COMPRESSED("can't add special method to already-subclassed class", "\377\205add special method\217already-subclassed class")
MP_MATCH_COMPRESSED("can't assign to expression", "\377\205assign\217expression")
MP_MATCH_COMPRESSED("can't cancel self", "\377\205cancel self")
MP_MATCH_COMPRESSED("can't convert %s to complex", "\377\205\242\352\217\354")
MP_MATCH_COMPRESSED("can't convert %s to float", "\377\205\242\352\217\303")
MP_MATCH_COMPRESSED("can't convert %s to int", "\377\205\242\352\217int")
MP_MATCH_COMPRESSED("can't convert '%q' object to %q implicitly", "\377\205\242\212\224\217%q implicitly")
MP_MATCH_COMPRESSED("can't convert NaN to int", "\377\205\242NaN\217int")
MP_MATCH_COMPRESSED("can't convert arg %d from %s to float", "\377\205\242\301\251\334\352\217\303")
MP_MATCH_COMPRESSED("can't convert inf to int", "\377\205\242inf\217int")
MP_MATCH_COMPRESSED("can't create '%q' instances", "\377\205create\212instances")
MP_MATCH_COMPRESSED("can't declare nonlocal in outer code", "\377\205declare nonlocal\270outer code")
MP_MATCH_COMPRESSED("can't delete expression", "\377\205delete expression")
MP_MATCH_COMPRESSED("can't do binary op between '%q' and '%q'", "\377\205do binary op\310\212\253\212")
MP_MATCH_COMPRESSED("can't do unary op of '%q'", "\377\205do unary op\211\212")
MP_MATCH_COMPRESSED("can't encrypt & decrypt", "\377\205encrypt & decrypt")
MP_MATCH_COMPRESSED("can't implicitly convert '%q' to 'bool'", "\377\205implicitly\242\212\217'bool'")
MP_MATCH_COMPRESSED("can't import name %q", "\377\205import name %q")
MP_MATCH_COMPRESSED("can't load from '%q'", "\377\205load\334\212")
MP_MATCH_COMPRESSED("can't load with '%q' index", "\377\205load\255\212\234")
MP_MATCH_COMPRESSED("can't perform relative import", "\377\205perform relative import")
MP_MATCH_COMPRESSED("can't send non-None value to a just-started generator", "\377\205send non-None\342\217\240just-started\335")
MP_MATCH_COMPRESSED("can't set attribute", "\377\205set\306")
MP_MATCH_COMPRESSED("can't specify pos and kw args", "\377\205specify pos\253kw args")
MP_MATCH_COMPRESSED("can't store '%q'", "\377\205store\212")
MP_MATCH_COMPRESSED("can't store to '%q'", "\377\205store\217\212")
MP_MATCH_COMPRESSED("can't store with '%q' index", "\377\205store\255\212\234")
MP_MATCH_COMPRESSED("can't switch from automatic field numbering to manual field specification", "\377\205switch\334automatic\360numbering\217manual\360specification")
MP_MATCH_COMPRESSED("can't switch from manual field specification to automatic field numbering", "\377\205switch\334manual\360specification\217automatic\360numbering")
MP_MATCH_COMPRESSED("can't truncate-divide a complex number", "\377\205truncate-divide\240\354\371")
MP_MATCH_COMPRESSED("can't unambiguously get sizeof scalar", "\377\205unambiguously get sizeof scalar")
MP_MATCH_COMPRESSED("can't wait", "\377\205wait")
MP_MATCH_COMPRESSED("cannot assign new shape", "\377\271assign new\263")
MP_MATCH_COMPRESSED("cannot cast output with casting rule", "\377\271cast\305\255casting rule")
MP_MATCH_COMPRESSED("cannot delete array elements", "\377\271delete\225elements")
MP_MATCH_COMPRESSED("cannot grow or shrink image", "\377\271grow\252shrink\304")
MP_MATCH_COMPRESSED("cannot reshape array", "\377\271reshape\225")
MP_MATCH_COMPRESSED("casting", "casting")
MP_MATCH_COMPRESSED("chr() arg not in range(0x110000)", "\377chr()\301\203\270range(0x110000)")
MP_MATCH_COMPRESSED("comparison of int and uint", "\377comparison\211int\253uint")
MP_MATCH_COMPRESSED("complex divide by zero", "\377\354divide by zero")
MP_MATCH_COMPRESSED("conversion to object", "\377\364\217\224")
MP_MATCH_COMPRESSED("convolve arguments must be linear arrays", "\377convolve\204\200\201linear\250")
MP_MATCH_COMPRESSED("convolve arguments must be ndarrays", "\377convolve\204\200\201\235")
MP_MATCH_COMPRESSED("convolve arguments must not be empty", "\377convolve\204\200\203\201\262")
MP_MATCH_COMPRESSED("corrupted file", "corrupted file")
MP_MATCH_COMPRESSED("could not invert Vandermonde matrix", "\377could\203invert Vandermonde\321")
MP_MATCH_COMPRESSED("cross is defined for 1D arrays of length 3", "\377cross\213\236\216\367\250\211\2223")
MP_MATCH_COMPRESSED("cts not available", "\377cts\203\307")
MP_MATCH_COMPRESSED("data type not understood", "\377data\223\203understood")
MP_MATCH_COMPRESSED("default 'except' must be last", "\377default 'except'\200\201last")
MP_MATCH_COMPRESSED("dict update sequence has wrong length", "\377dict update\300\267\241\222")
MP_MATCH_COMPRESSED("diff argument must be an ndarray", "\377diff\202\200\201\233\226")
MP_MATCH_COMPRESSED("differentiation order out of range", "\377differentiation order\244\211\275")
MP_MATCH_COMPRESSED("dimensions do not match", "\377\302do\203match")
MP_MATCH_COMPRESSED("div/mod not implemented for uint", "\377div/mod\203\230\216uint")
MP_MATCH_COMPRESSED("divide by zero", "divide by zero")
MP_MATCH_COMPRESSED("dtype of int32 is not supported", "\377\333\211int32\213\203\207")
MP_MATCH_COMPRESSED("empty", "\377\262")
MP_MATCH_COMPRESSED("empty file", "\377\262file")
MP_MATCH_COMPRESSED("empty heap", "\377\262heap")
MP_MATCH_COMPRESSED("empty separator", "\377\262separator")
MP_MATCH_COMPRESSED("encoding", "encoding")
MP_MATCH_COMPRESSED("end of format while looking for conversion specifier", "\377end\211\214while looking\216\364\264")
MP_MATCH_COMPRESSED("error in regex", "\377\357\270regex")
MP_MATCH_COMPRESSED("exceptions must derive from BaseException", "\377exceptions\200derive\334BaseException")
MP_MATCH_COMPRESSED("expected ':' after format specifier", "\377\312':' after\214\264")
MP_MATCH_COMPRESSED("expecting an assembler instruction", "\377expecting\233assembler instruction")
MP_MATCH_COMPRESSED("expecting just a value for set", "\377expecting just\240\342\216set")
MP_MATCH_COMPRESSED("expecting key:value for dict", "\377expecting key:value\216dict")
MP_MATCH_COMPRESSED("extra keyword arguments given", "\377extra\257\204\336")
MP_MATCH_COMPRESSED("extra positional arguments given", "\377extra\245\204\336")
MP_MATCH_COMPRESSED("fifo must be 0", "\377fifo\200\201\327")
MP_MATCH_COMPRESSED("first argument must be a callable", "\377\313\202\200\201\240callable")
MP_MATCH_COMPRESSED("first argument must be a function", "\377\313\202\200\201\240\210")
MP_MATCH_COMPRESSED("first argument must be a tuple of ndarrays", "\377\313\202\200\201\240\276\211\235")
MP_MATCH_COMPRESSED("first argument must be an ndarray", "\377\313\202\200\201\233\226")
MP_MATCH_COMPRESSED("first two arguments must be ndarrays", "\377\313two\204\200\201\235")
MP_MATCH_COMPRESSED("flash block write command failed with %d", "\377flash block write command failed\255\251")
MP_MATCH_COMPRESSED("flash erase command failed with %d", "\377flash erase command failed\255\251")
MP_MATCH_COMPRESSED("flattening order must be either 'C', or 'F'", "\377flattening order\200\201either 'C',\252'F'")
MP_MATCH_COMPRESSED("flip argument must be an ndarray", "\377flip\202\200\201\233\226")
MP_MATCH_COMPRESSED("format", "\377\214")
MP_MATCH_COMPRESSED("format needs a dict", "\377\214\315\240dict")
MP_MATCH_COMPRESSED("format string didn't convert all arguments", "\377\214\266didn't\242all\204")
MP_MATCH_COMPRESSED("format string needs more arguments", "\377\214\266\315more\204")
MP_MATCH_COMPRESSED("full", "full")
MP_MATCH_COMPRESSED("function doesn't take keyword arguments", "\377\210\221take\257\204")
MP_MATCH_COMPRESSED("function expected at most %d arguments, got %d", "\377\210\312at most\251arguments, got\251")
MP_MATCH_COMPRESSED("function got multiple values for argument '%q'", "\377\210got\345values\216\202\212")
MP_MATCH_COMPRESSED("function has the same sign at the ends of interval", "\377\210\267\246same sign at\246ends\211interval")
MP_MATCH_COMPRESSED("function is defined for ndarrays only", "\377\210\213\236\216\235\254")
MP_MATCH_COMPRESSED("function missing %d required positional arguments", "\377\210\363\251\260\245\204")
MP_MATCH_COMPRESSED("function missing keyword-only argument", "\377\210\363keyword-only\202")
MP_MATCH_COMPRESSED("function missing required keyword argument '%q'", "\377\210\363\260\257\202\212")
MP_MATCH_COMPRESSED("function missing required positional argument #%d", "\377\210\363\260\245\202#%d")
MP_MATCH_COMPRESSED("function takes %d positional arguments but %d were given", "\377\210takes\251\245\204\377\251were\336")
MP_MATCH_COMPRESSED("generator already executing", "\377\335already executing")
MP_MATCH_COMPRESSED("generator ignored GeneratorExit", "\377\335ignored GeneratorExit")
MP_MATCH_COMPRESSED("generator raised StopIteration", "\377\335raised StopIteration")
MP_MATCH_COMPRESSED("hash is final", "\377hash\213final")
MP_MATCH_COMPRESSED("heap must be a list", "\377heap\200\201\240\350")
MP_MATCH_COMPRESSED("identifier redefined as global", "\377\326redefined as global")
MP_MATCH_COMPRESSED("identifier redefined as nonlocal", "\377\326redefined as nonlocal")
MP_MATCH_COMPRESSED("import * not at module level", "\377import *\203at module level")
MP_MATCH_COMPRESSED("incompatible .mpy arch", "incompatible .mpy arch")
MP_MATCH_COMPRESSED("incompatible .mpy file", "incompatible .mpy file")
MP_MATCH_COMPRESSED("incomplete format", "\377incomplete\214")
MP_MATCH_COMPRESSED("incomplete format key", "\377incomplete\214key")
MP_MATCH_COMPRESSED("incorrect padding", "incorrect padding")
MP_MATCH_COMPRESSED("index is out of bounds", "\377\234\213\244\211bounds")
MP_MATCH_COMPRESSED("index must not be negative", "\377\234\200\203\201negative")
MP_MATCH_COMPRESSED("index out of range", "\377\234\244\211\275")
MP_MATCH_COMPRESSED("indices must be integers, slices, or Boolean lists", "\377\361\200\201integers, slices,\252Boolean lists")
MP_MATCH_COMPRESSED("inline assembler must be a function", "\377inline assembler\200\201\240\210")
MP_MATCH_COMPRESSED("input and out arrays must have same length", "\377\215\253\244\250\200have same\222")
MP_MATCH_COMPRESSED("input and output dimensions differ", "\377\215\253\305\302differ")
MP_MATCH_COMPRESSED("input and output shapes differ", "\377\215\253\305shapes differ")
MP_MATCH_COMPRESSED("input argument must be an integer, a tuple, or a list", "\377\215\202\200\201\233integer,\240tuple,\252\240\350")
MP_MATCH_COMPRESSED("input array length must be power of 2", "\377\215\225\222\200\201power\211\375")
MP_MATCH_COMPRESSED("input arrays are not compatible", "\377\215\250are\203compatible")
MP_MATCH_COMPRESSED("input data must be an iterable", "\377\215data\200\201\233\344")
MP_MATCH_COMPRESSED("input is not an array", "\377\215\213\203\233\225")
MP_MATCH_COMPRESSED("input is not iterable", "\377\215\213\203\344")
MP_MATCH_COMPRESSED("input matrix is asymmetric", "\377\215\321\213asymmetric")
MP_MATCH_COMPRESSED("input matrix is singular", "\377\215\321\213singular")
MP_MATCH_COMPRESSED("input must be 1- or 2-d", "\377\215\200\2011-\2522-d")
MP_MATCH_COMPRESSED("input must be a dense ndarray", "\377\215\200\201\240dense\226")
MP_MATCH_COMPRESSED("input must be one-dimensional", "\377\215\200\201one-dimensional")
MP_MATCH_COMPRESSED("input must be square matrix", "\377\215\200\201square\321")
MP_MATCH_COMPRESSED("input must be tuple, list, range, or ndarray", "\377\215\200\201tuple, list, range,\252\226")
MP_MATCH_COMPRESSED("input vectors must be of equal length", "\377\215vectors\200\201\211\356\222")
MP_MATCH_COMPRESSED("int() arg 2 must be >= 2 and <= 36", "\377int()\301\375\200\201>=\375\253\33236")
MP_MATCH_COMPRESSED("integer needed", "\377\237needed")
MP_MATCH_COMPRESSED("interp is defined for 1D iterables of equal length", "\377interp\213\236\216\367iterables\211\356\222")
MP_MATCH_COMPRESSED("invalid UUID", "\377\206\317")
MP_MATCH_COMPRESSED("invalid addr", "\377\206addr")
MP_MATCH_COMPRESSED("invalid address type", "\377\206\353\223")
MP_MATCH_COMPRESSED("invalid addrsize", "\377\206addrsize")
MP_MATCH_COMPRESSED("invalid argument(s) value", "\377\206argument(s)\342")
MP_MATCH_COMPRESSED("invalid arguments", "\377\206\204")
MP_MATCH_COMPRESSED("invalid arguments as dns server", "\377\206\204as dns server")
MP_MATCH_COMPRESSED("invalid cert", "\377\206cert")
MP_MATCH_COMPRESSED("invalid char in UUID", "\377\206char\270\317")
MP_MATCH_COMPRESSED("invalid characteristic UUID", "\377\206characteristic\317")
MP_MATCH_COMPRESSED("invalid characteristic tuple", "\377\206characteristic\276")
MP_MATCH_COMPRESSED("invalid descriptor UUID", "\377\206descriptor\317")
MP_MATCH_COMPRESSED("invalid drive strength: %d", "\377\206drive strength:\251")
MP_MATCH_COMPRESSED("invalid dupterm index", "\377\206dupterm\234")
MP_MATCH_COMPRESSED("invalid format", "\377\206\214")
MP_MATCH_COMPRESSED("invalid format specifier", "\377\206\214\264")
MP_MATCH_COMPRESSED("invalid handler", "\377\206handler")
MP_MATCH_COMPRESSED("invalid key", "\377\206key")
MP_MATCH_COMPRESSED("invalid micropython decorator", "\377\206micropython decorator")
MP_MATCH_COMPRESSED("invalid pin mode: %d", "\377\206pin mode:\251")
MP_MATCH_COMPRESSED("invalid prefer argument", "\377\206prefer\202")
MP_MATCH_COMPRESSED("invalid service UUID", "\377\206service\317")
MP_MATCH_COMPRESSED("invalid syntax", "\377\206\374")
MP_MATCH_COMPRESSED("invalid syntax for number", "\377\206\374\216\371")
MP_MATCH_COMPRESSED("issubclass() arg 1 must be a class", "\377issubclass()\3011\200\201\240class")
MP_MATCH_COMPRESSED("issubclass() arg 2 must be a class or a tuple of classes", "\377issubclass()\301\375\200\201\240class\252\240\276\211classes")
MP_MATCH_COMPRESSED("iterations did not converge", "\377iterations did\203converge")
MP_MATCH_COMPRESSED("join expects a list of str/bytes objects consistent with self object", "\377join\256\240\350\211str/bytes objects consistent\255self\224")
MP_MATCH_COMPRESSED("key", "key")
MP_MATCH_COMPRESSED("keyword argument(s) not implemented - use normal args instead", "\377\257argument(s)\203\230- use normal args instead")
MP_MATCH_COMPRESSED("l_bins must be >= 2", "\377l_bins\200\201>=\375")
MP_MATCH_COMPRESSED("label '%q' not defined", "\377label\212\203\236")
MP_MATCH_COMPRESSED("label redefined", "label redefined")
MP_MATCH_COMPRESSED("levels needs to be a positive integer", "\377levels\315\217\201\240\347\237")
MP_MATCH_COMPRESSED("lhs and rhs should be compatible", "\377lhs\253rhs\323\201compatible")
MP_MATCH_COMPRESSED("local '%q' has type '%q' but source is '%q'", "\377local\212\267\223\212\377source\213\212")
MP_MATCH_COMPRESSED("local '%q' used before type known", "\377local\212used before\223known")
MP_MATCH_COMPRESSED("local variable referenced before assignment", "\377local variable referenced before\325")
MP_MATCH_COMPRESSED("malformed f-string", "malformed f-string")
MP_MATCH_COMPRESSED("math domain error", "\377math domain\357")
MP_MATCH_COMPRESSED("matrix is not positive definite", "\377\321\213\203\347definite")
MP_MATCH_COMPRESSED("maxiter must be > 0", "\377maxiter\200\201>\327")
MP_MATCH_COMPRESSED("maxiter should be > 0", "\377maxiter\323\201>\327")
MP_MATCH_COMPRESSED("median argument must be an ndarray", "\377median\202\200\201\233\226")
MP_MATCH_COMPRESSED("memory allocation failed, allocating %u bytes", "memory allocation failed, allocating %u bytes")
MP_MATCH_COMPRESSED("memory allocation failed, heap is locked", "\377memory allocation failed, heap\213locked")
MP_MATCH_COMPRESSED("memoryview offset too large", "\377memoryview\372\231\362")
MP_MATCH_COMPRESSED("mktime needs a tuple of length 8 or 9", "\377mktime\315\240\276\211\2228\2529")
MP_MATCH_COMPRESSED("mode", "mode")
MP_MATCH_COMPRESSED("mode must be complete, or reduced", "\377mode\200\201complete,\252reduced")
MP_MATCH_COMPRESSED("mode should be raise, wrap or clip", "\377mode\323\201raise, wrap\252clip")
MP_MATCH_COMPRESSED("more degrees of freedom than data points", "\377more degrees\211freedom\341data points")
MP_MATCH_COMPRESSED("multiple *x in assignment", "\377\345*x\270\325")
MP_MATCH_COMPRESSED("multiple bases have instance lay-out conflict", "\377\345bases have instance lay-out conflict")
MP_MATCH_COMPRESSED("must query one param", "\377\200query one param")
MP_MATCH_COMPRESSED("must raise an object", "\377\200raise\233\224")
MP_MATCH_COMPRESSED("must specify all of sck/mosi/miso", "\377\200specify all\211sck/mosi/miso")
MP_MATCH_COMPRESSED("must use keyword argument for key function", "\377\200use\257\202\216key\210")
MP_MATCH_COMPRESSED("name '%q' isn't defined", "\377name\212\314\236")
MP_MATCH_COMPRESSED("name too long", "\377name\231\351")
MP_MATCH_COMPRESSED("native code in .mpy unsupported", "\377\370code\270.mpy\265")
MP_MATCH_COMPRESSED("native method too big", "\377\370method\231big")
MP_MATCH_COMPRESSED("native yield", "\377\370yield")
MP_MATCH_COMPRESSED("ndarray length overflows", "\377\226\222overflows")
MP_MATCH_COMPRESSED("need more than %d values to unpack", "\377need more\341\251values\217unpack")
MP_MATCH_COMPRESSED("negative factorial", "negative factorial")
MP_MATCH_COMPRESSED("negative shift count", "negative shift count")
MP_MATCH_COMPRESSED("no active exception to reraise", "\377\346active exception\217reraise")
MP_MATCH_COMPRESSED("no available NIC", "\377\346\307NIC")
MP_MATCH_COMPRESSED("no binding for nonlocal found", "\377\346binding\216nonlocal found")
MP_MATCH_COMPRESSED("no module named '%q'", "\377\346module named\212")
MP_MATCH_COMPRESSED("no such attribute", "\377\346such\306")
MP_MATCH_COMPRESSED("non-default argument follows default argument", "\377non-default\202follows default\202")
MP_MATCH_COMPRESSED("non-hex digit", "non-hex digit")
MP_MATCH_COMPRESSED("not a constant", "\377\203\240constant")
MP_MATCH_COMPRESSED("not supported for input types", "\377\203\207\216\215types")
MP_MATCH_COMPRESSED("number of points must be at least 2", "\377\371\211points\200\201at least\375")
MP_MATCH_COMPRESSED("object '%s' isn't a tuple or list", "\377\224\227\314\240\276\252\350")
MP_MATCH_COMPRESSED("object not in sequence", "\377\224\203\270\300")
MP_MATCH_COMPRESSED("object of type '%s' has no len()", "\377\224\211\223\227\267\346len()")
MP_MATCH_COMPRESSED("object with buffer protocol required", "\377\224\255\320protocol\260")
MP_MATCH_COMPRESSED("offset is too large", "\377\372\213\231\362")
MP_MATCH_COMPRESSED("offset must be non-negative and no greater than buffer length", "\377\372\200\201non-negative\253\346greater\341\320\222")
MP_MATCH_COMPRESSED("only ndarrays can be concatenated", "\377\254\235can\201concatenated")
MP_MATCH_COMPRESSED("only slices with step=1 (aka None) are supported", "\377\254slices\255step=1 (aka None) are\207")
MP_MATCH_COMPRESSED("opcode", "opcode")
MP_MATCH_COMPRESSED("operands could not be broadcast together", "\377operands could\203\201broadcast together")
MP_MATCH_COMPRESSED("operation is defined for 2D arrays only", "\377\243\213\236\2162D\250\254")
MP_MATCH_COMPRESSED("operation is defined for ndarrays only", "\377\243\213\236\216\235\254")
MP_MATCH_COMPRESSED("operation is implemented for 1D Boolean arrays only", "\377\243\213\230\216\367Boolean\250\254")
MP_MATCH_COMPRESSED("operation is not implemented on ndarrays", "\377\243\213\203\230on\235")
MP_MATCH_COMPRESSED("operation is not supported for given type", "\377\243\213\203\207\216\336\223")
MP_MATCH_COMPRESSED("operation not supported for the input types", "\377\243\203\207\216\246\215types")
MP_MATCH_COMPRESSED("ord() expected a character, but string of length %d found", "\377ord()\312\240character,\377\266\211\222\251found")
MP_MATCH_COMPRESSED("order needs to be a positive integer", "\377order\315\217\201\240\347\237")
MP_MATCH_COMPRESSED("out array has wrong dimension", "\377\244\225\267\241dimension")
MP_MATCH_COMPRESSED("out array has wrong dtype", "\377\244\225\267\241\333")
MP_MATCH_COMPRESSED("out array has wrong shape", "\377\244\225\267\241\263")
MP_MATCH_COMPRESSED("out array is too small", "\377\244\225\213\231small")
MP_MATCH_COMPRESSED("out array must be a 1D array of float type", "\377\244\225\200\201\240\367\225\211\303\223")
MP_MATCH_COMPRESSED("out has wrong type", "\377\244\267\241\223")
MP_MATCH_COMPRESSED("out keyword is not supported for function", "\377\244\257\213\203\207\216\210")
MP_MATCH_COMPRESSED("out must be a float dense array", "\377\244\200\201\240\303dense\225")
MP_MATCH_COMPRESSED("out must be an ndarray", "\377\244\200\201\233\226")
MP_MATCH_COMPRESSED("out must be of float dtype", "\377\244\200\201\211\303\333")
MP_MATCH_COMPRESSED("output array has wrong type", "\377\305\225\267\241\223")
MP_MATCH_COMPRESSED("output array must be contiguous", "\377\305\225\200\201contiguous")
MP_MATCH_COMPRESSED("output too small", "\377\305\231small")
MP_MATCH_COMPRESSED("overflow converting long int to machine word", "\377overflow converting\351int\217machine word")
MP_MATCH_COMPRESSED("parameters must be registers in sequence r0 to r3", "\377parameters\200\201registers\270\300r0\217r3")
MP_MATCH_COMPRESSED("period too large", "\377period\231\362")
MP_MATCH_COMPRESSED("pop from an empty set", "\377pop\334\233\262set")
MP_MATCH_COMPRESSED("pop from empty list", "\377pop\334\262\350")
MP_MATCH_COMPRESSED("popitem(): dictionary is empty", "\377popitem(): dictionary\213\262")
MP_MATCH_COMPRESSED("positional arg after **", "\377\245\301after **")
MP_MATCH_COMPRESSED("positional arg after keyword arg", "\377\245\301after\257\301")
MP_MATCH_COMPRESSED("pow() with 3 arguments requires integers", "\377pow()\2553\204\261\343")
MP_MATCH_COMPRESSED("real and imaginary parts must be of equal length", "\377real\253imaginary parts\200\201\211\356\222")
MP_MATCH_COMPRESSED("requested AF %d not available for pin %d", "\377requested AF\251\203\307\216pin\251")
MP_MATCH_COMPRESSED("requested length %d but object has length %d", "\377requested\222\251\377\224\267\222\251")
MP_MATCH_COMPRESSED("results cannot be cast to specified type", "\377results\271\201cast\217specified\223")
MP_MATCH_COMPRESSED("return annotation must be an identifier", "\377return annotation\200\201\233\326")
MP_MATCH_COMPRESSED("return expected '%q' but got '%q'", "\377return\312\212\377got\212")
MP_MATCH_COMPRESSED("roll argument must be an ndarray", "\377roll\202\200\201\233\226")
MP_MATCH_COMPRESSED("rsplit(None,n)", "rsplit(None,n)")
MP_MATCH_COMPRESSED("rts not available", "\377rts\203\307")
MP_MATCH_COMPRESSED("rxbuf too large", "\377rxbuf\231\362")
MP_MATCH_COMPRESSED("schedule queue full", "schedule queue full")
MP_MATCH_COMPRESSED("scratchpad must be a 1D dense float array", "\377\365\200\201\240\367dense\303\225")
MP_MATCH_COMPRESSED("scratchpad must be an ndarray", "\377\365\200\201\233\226")
MP_MATCH_COMPRESSED("scratchpad must be twice as long as input", "\377\365\200\201twice as\351as\215")
MP_MATCH_COMPRESSED("shape must be None, and integer or a tuple of integers", "\377\263\200\201None,\253\237\252\240\276\211\343")
MP_MATCH_COMPRESSED("shape must be integer or tuple of integers", "\377\263\200\201\237\252\276\211\343")
MP_MATCH_COMPRESSED("sign not allowed in string format specifier", "\377sign\203allowed\270\266\214\264")
MP_MATCH_COMPRESSED("sign not allowed with integer format specifier 'c'", "\377sign\203allowed\255\237\214\264'c'")
MP_MATCH_COMPRESSED("single '}' encountered in format string", "\377single '}' encountered\270\214\266")
MP_MATCH_COMPRESSED("size is defined for ndarrays only", "\377\340\213\236\216\235\254")
MP_MATCH_COMPRESSED("size must match out.shape when used together", "\377\340\200match out.shape when used together")
MP_MATCH_COMPRESSED("slice step can't be zero", "\377slice step\205\201zero")
MP_MATCH_COMPRESSED("sort argument must be an ndarray", "\377sort\202\200\201\233\226")
MP_MATCH_COMPRESSED("sos array must be of shape (n_section, 6)", "\377sos\225\200\201\211\263(n_section, 6)")
MP_MATCH_COMPRESSED("sos[:, 3] should be all ones", "\377sos[:, 3]\323\201all ones")
MP_MATCH_COMPRESSED("sosfilt requires iterable arguments", "\377sosfilt\261\344\204")
MP_MATCH_COMPRESSED("spectrogram is defined for ndarrays only", "\377spectrogram\213\236\216\235\254")
MP_MATCH_COMPRESSED("spectrogram is implemented for 1D arrays only", "\377spectrogram\213\230\216\367\250\254")
MP_MATCH_COMPRESSED("splitting with sub-captures", "\377splitting\255sub-captures")
MP_MATCH_COMPRESSED("steps needs to be a positive integer", "\377steps\315\217\201\240\347\237")
MP_MATCH_COMPRESSED("stream operation not supported", "\377\272\243\203\207")
MP_MATCH_COMPRESSED("string argument without an encoding", "\377\266\202without\233encoding")
MP_MATCH_COMPRESSED("string index out of range", "\377\266\234\244\211\275")
MP_MATCH_COMPRESSED("string indices must be integers, not %s", "\377\266\361\200\201integers,\203\352")
MP_MATCH_COMPRESSED("struct: can't index", "\377struct:\205\234")
MP_MATCH_COMPRESSED("struct: index out of range", "\377struct:\234\244\211\275")
MP_MATCH_COMPRESSED("struct: no fields", "\377struct:\346fields")
MP_MATCH_COMPRESSED("substring not found", "\377substring\203found")
MP_MATCH_COMPRESSED("super() can't find self", "\377super()\205find self")
MP_MATCH_COMPRESSED("syntax error in JSON", "\377\374\357\270JSON")
MP_MATCH_COMPRESSED("syntax error in uctypes descriptor", "\377\374\357\270uctypes descriptor")
MP_MATCH_COMPRESSED("the first Pin doesn't support PWM", "\377\246\313Pin\221\331PWM")
MP_MATCH_COMPRESSED("the pins must be a A/B pair of a submodule", "\377\246pins\200\201\240A/B pair\211\240submodule")
MP_MATCH_COMPRESSED("the second Pin doesn't support PWM", "\377\246second Pin\221\331PWM")
MP_MATCH_COMPRESSED("ticks interval overflow", "ticks interval overflow")
MP_MATCH_COMPRESSED("timeout waiting for DHCP to get IP address", "\377timeout waiting\216DHCP\217get IP\353")
MP_MATCH_COMPRESSED("tobytes can be invoked for dense arrays only", "\377tobytes can\201invoked\216dense\250\254")
MP_MATCH_COMPRESSED("too many args", "\377\231\337args")
MP_MATCH_COMPRESSED("too many dimensions", "\377\231\337\302")
MP_MATCH_COMPRESSED("too many indices", "\377\231\337\361")
MP_MATCH_COMPRESSED("too many locals for native method", "\377\231\337locals\216\370method")
MP_MATCH_COMPRESSED("too many values to unpack (expected %d)", "\377\231\337values\217unpack (expected %d)")
MP_MATCH_COMPRESSED("trapz is defined for 1D arrays of equal length", "\377trapz\213\236\216\367\250\211\356\222")
MP_MATCH_COMPRESSED("trapz is defined for 1D iterables", "\377trapz\213\236\216\367iterables")
MP_MATCH_COMPRESSED("tuple index out of range", "\377\276\234\244\211\275")
MP_MATCH_COMPRESSED("txbuf too large", "\377txbuf\231\362")
MP_MATCH_COMPRESSED("type '%q' isn't an acceptable base type", "\377\223\212\314\233acceptable base\223")
MP_MATCH_COMPRESSED("type object '%q' has no attribute '%q'", "\377\223\224\212\267\346\306\212")
MP_MATCH_COMPRESSED("type takes 1 or 3 arguments", "\377\223takes 1\2523\204")
MP_MATCH_COMPRESSED("unexpected indent", "\377\366indent")
MP_MATCH_COMPRESSED("unexpected key", "\377\366key")
MP_MATCH_COMPRESSED("unexpected keyword argument '%q'", "\377\366\257\202\212")
MP_MATCH_COMPRESSED("unicode name escapes", "unicode name escapes")
MP_MATCH_COMPRESSED("unindent doesn't match any outer indent level", "\377unindent\221match any outer indent level")
MP_MATCH_COMPRESSED("unknown config param", "\377\277config param")
MP_MATCH_COMPRESSED("unknown conversion specifier %c", "\377\277\364\264%c")
MP_MATCH_COMPRESSED("unknown format code '%c' for object of type '%s'", "\377\277\214code '%c'\216\224\211\223\227")
MP_MATCH_COMPRESSED("unknown status param", "\377\277status param")
MP_MATCH_COMPRESSED("unknown type", "\377\277\223")
MP_MATCH_COMPRESSED("unknown type '%q'", "\377\277\223\212")
MP_MATCH_COMPRESSED("unmatched '{' in format", "\377unmatched '{'\270\214")
MP_MATCH_COMPRESSED("unreadable attribute", "\377unreadable\306")
MP_MATCH_COMPRESSED("unsupported Thumb instruction '%s' with %d arguments", "\377\265Thumb instruction\227\255\251\204")
MP_MATCH_COMPRESSED("unsupported format character '%c' (0x%x) at index %d", "\377\265\214character '%c' (0x%x) at\234\251")
MP_MATCH_COMPRESSED("unsupported type for %q: '%s'", "\377\265\223\216%q:\227")
MP_MATCH_COMPRESSED("unsupported types for %q: '%s', '%s'", "\377\265types\216%q: '%s',\227")
MP_MATCH_COMPRESSED("usecols is too high", "\377usecols\213\231high")
MP_MATCH_COMPRESSED("value out of range -16 to 15", "\377\342\244\211\275-16\21715")
MP_MATCH_COMPRESSED("wbits", "wbits")
MP_MATCH_COMPRESSED("wrong axis index", "\377\241\376\234")
MP_MATCH_COMPRESSED("wrong axis specified", "\377\241\376specified")
MP_MATCH_COMPRESSED("wrong dtype", "\377\241\333")
MP_MATCH_COMPRESSED("wrong index type", "\377\241\234\223")
MP_MATCH_COMPRESSED("wrong input type", "\377\241\215\223")
MP_MATCH_COMPRESSED("wrong length of condition array", "\377\241\222\211condition\225")
MP_MATCH_COMPRESSED("wrong length of index array", "\377\241\222\211\234\225")
MP_MATCH_COMPRESSED("wrong number of arguments", "\377\241\371\211\204")
MP_MATCH_COMPRESSED("wrong output type", "\377\241\305\223")
MP_MATCH_COMPRESSED("x_stride must not be zero.", "\377x_stride\200\203\201zero.")
MP_MATCH_COMPRESSED("y_stride must not be zero.", "\377y_stride\200\203\201zero.")
MP_MATCH_COMPRESSED("zero step", "zero step")
MP_MATCH_COMPRESSED("zi must be an ndarray", "\377zi\200\201\233\226")
MP_MATCH_COMPRESSED("zi must be of float type", "\377zi\200\201\211\303\223")
MP_MATCH_COMPRESSED("zi must be of shape (n_section, 2)", "\377zi\200\201\211\263(n_section, 2)")
// Total input length:      16877
// Total compressed length: 9279
// Total data length:       1128
// Predicted saving:        6470

// gzip length:             9329
// Percentage of gzip:      111.6%
// zlib length:             9317
// Percentage of zlib:      111.7%
